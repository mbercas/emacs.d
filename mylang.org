
#+STARTUP: overview

* LSP
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
   :ensure t
   :commands lsp
   :config

   (use-package lsp-treemacs
      :ensure t
      :after (lsp-mode treemacs))

   (use-package lsp-ui
      :ensure t
      :config
      (setq lsp-ui-sideline-ignore-duplicate t)
      (add-hook 'lsp-mode-hook 'lsp-ui-mode))


   (use-package company
      :ensure t)

   (use-package company-lsp
      :ensure t
      :after (company lsp-mode)
      :config
      (push 'company-lsp company-backends))
)

#+END_SRC

#+RESULTS:
: t
* Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :init
  :after elpy
  :config
  ;(add-hook 'elpy-mode-hook 'flycheck-mode)
)

#+end_src
* Yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
   :ensure t
   :hook (prog-mode . yas-minor-mode)
   :hook (org-mode . yas-minor-mode)
   :config
   (use-package yasnippet-snippets
       :ensure t
       :pin melpa)

   (yas-reload-all))
#+END_SRC

#+RESULTS:
| yas-minor-mode |

* C / C++ language configuration
#+BEGIN_SRC emacs-lisp
;; Default offset in all languages is 4 spaces
;;
(setq c-basic-offset 4)

;; cc-mode (the mode you're in when editing C, C++, and Objective C files)
;;
(setq c-default-style "linux")
(setq-default indent-tabs-mode nil)

;; Tell cc-mode not to check for old-style (K&R) function declarations.
;; This speeds up indenting a lot.
(setq c-recognize-knr-p nil)

(add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))

;; Change the indentation amount to 4 spaces instead of 2.
;; You have to do it in this complicated way because of the
;; strange way the cc-mode initializes the value of `c-basic-offset'.
(add-hook 'c-mode-hook (lambda () (setq c-basic-offset 4)))
(add-hook 'c++-mode-hook (lambda () (setq c-basic-offset 4)))

(add-hook 'c++-mode-hook (lambda () (highlight-lines-matching-regexp ".\{91\}" "hi-green-b")))

(add-hook 'c-mode-hook (lambda () (linum-mode 1)))
(add-hook 'cc-mode-hook (lambda () (linum-mode 1)))
(add-hook 'c++-mode-hook (lambda () (linum-mode 1)))

(add-hook 'c-mode-hook (lambda () (show-paren-mode 1)))
(add-hook 'cc-mode-hook (lambda () (show-paren-mode 1)))
(add-hook 'c++-mode-hook (lambda () (show-paren-mode 1)))

(add-hook 'c-mode-hook 'projectile-mode)
(add-hook 'cc-mode-hook 'projectile-mode)
(add-hook 'c++-mode-hook 'projectile-mode)


#+END_SRC

#+RESULTS:
| projectile-mode | (lambda nil (show-paren-mode 1)) | (lambda nil (linum-mode 1)) | (lambda nil (highlight-lines-matching-regexp .{91} hi-green-b)) | (lambda nil (setq c-basic-offset 4)) |

* Python language configuration
 - elpy mode
 - sets automatic guess of the python offset but silences the warnings
 - for windows Python or ipython must be in the path
#+BEGIN_SRC emacs-lisp
;;; ********************
;;; Sets the Python mode
;;;
(use-package python
  :ensure t
  :defer t
  :mode ("\\.py\\'" . python-mode)
  :config
  (setq python-indent-guess-indent-offset t)
  (setq python-indent-guess-indent-offset-verbose t))


(use-package lsp-python-ms
  :ensure t
  :init
     (setq lsp-pyhton-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                         (require 'lsp-python-ms)
                         (lsp))))  ; or lsp-deferred

;; ensure:
;;; pip install jedi
;;  pip install flake8
;;  pip install importmagic
;;  pip install autopep8
;;  pip install yapf
;;  pip install python-language-sever[all]

(use-package elpy
  :ensure t
  :defer t
  :init (advice-add 'python-mode :before 'elpy-enable)
  :hook (elpy-mode . flycheck-mode)
  :config
  (progn
    (setq
      python-shell-interpreter "ipython3"
      python-shell-interpreter-args "--simple-prompt -i"
      elpy-rpc-backend "jedi"
      elpy-rpc-project-specfic 't)
    (when (fboundp 'flycheck-mode)
      (setq elpy-modules (delete 'elpy-module-flymake elpy-modules)))
    (add-hook 'elpy-mode-hook
      (lambda ()
        (set (make-local-variable 'company-backends)
         (append company-backends '(company-yasnippet)))))

    (add-hook 'elpy-mode-hook (lambda () (linum-mode 1)))
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
    )
)

;;; Disable takes too much CPU on this computer

(use-package pyvenv
  :ensure t
  :after python)


#+END_SRC

#+RESULTS:

** EIN-  emacs ipython notebooks
#+BEGIN_SRC emacs-lisp
(use-package anaphora
  :ensure t)

(use-package ein
  :ensure t
  :commands (ein:notebooklist-open))
#+END_SRC

* Lua configuration - lua mode
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (cons '("\\.lua$" . lua-mode) auto-mode-alist))
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)

(add-hook 'lua-mode-hook 'turn-on-font-lock)
;;;If you want to use hideshow, turn on hs-minor-mode or add this:
;(add-hook 'lua-mode-hook 'hs-minor-mode)
(add-hook 'lua-mode-hook (lambda () (linum-mode 1)))

#+END_SRC

* Mark-down mode and enable auto-correction
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure  t
  :defer   t
  :mode    ("\\.\\(markdown\\|mdown\\|md\\)$" . markdown-mode)
  :config
  (progn
    (add-hook 'markdown-mode-hook
             (lambda ()
               (visual-line-mode t)
               (writegood-mode t)
               (flyspell-mode t)))

    (setq markdown-command "pandoc --smart -f markdown -t html")
  )
)
#+END_SRC

* Lisp - enable slime (disabled)
;#+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure t
  :after lisp
  :config
  (progn
    (add-hook
     'slime-load-hook
     #'(lambda ()
	 (slime-setup
	  '(slime-fancy
	    slime-repl
	    slime-fuzzy))))
    (setq slime-net-coding-system 'utf-8-unix)
    (add-hook 'lisp-mode-hook (lambda () (linum-mode 1)))

    ;; Slime and Auto-Complete
    (use-package ac-slime
      :ensure t
      :init
      (progn
	(add-hook 'slime-mode-hook 'set-up-slime-ac)
	(add-hook 'slime-repl-mode-hook 'set-up-slime-ac))
      :config
      (progn
	(eval-after-load "auto-complete"
	  '(add-to-list 'ac-modes 'slime-repl-mode))))))



(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)
(add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
(add-hook 'lisp-mode-hook             'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'scheme-mode-hook           'enable-paredit-mode)
;; slime



;;(load (expand-file-name "~/quicklisp/slime-helper.el"))

(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)


(setq inferior-lisp-program "sbcl")

;; Stop SLIME's REPL from grabbing DEL,
;; which is annoying when backspacing over a '('
;;(defun override-slime-repl-bindings-with-paredit ()
;;  (define-key slime-repl-mode-map
;;    (read-kbd-macro paredit-backward-delete-key)
;;    nil))
;;(add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)


;;(add-hook 'lisp-mode-hook (lambda () (linum-mode 1)))
;#+END_SRC
* Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
   :ensure markdown-mode
   :defer t
   :mode ("\\.\\(markdown\\|mdown\\|md\\)$" . markdown-mode)
   :config
   (progn
     (add-hook 'markdown-mode-hook
       (lambda ()
           (visual-line-mode t)
           (writegood-mode t)
           (flyspell-mode t)))

       (cond
         ((string-equal system-type "windows-nt") ; windows
           (setq markdown-command "pandoc.exe -f markdown+smart -t html"))
         ((string-equal system-type "gnu/linux") ; linux
           (setq markdown-command "pandoc --smart -f markdown -t html"))))
)
(use-package markdown-preview-mode
    :ensure markdown-preview-mode
    :defer t
)

#+END_SRC

* ESS - R
#+BEGIN_SRC emacs-lisp
  (defun japhir/insert-r-pipe ()
    "Insert the pipe operator in R, %>%"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (reindent-then-newline-and-indent))

  (use-package ess
    ;; :load-path "/usr/share/emacs/site-lisp/ess/"
    :ensure t
    :pin melpa-stable
    ;; :init (require 'ess-site)  ;; seems like this is needed to load the minor modes as well keybindings don't work without it
    ;; :hook ((ess-r-mode inferior-ess-r-mode) . electric-layout-mode)  ;; commented out since new curly-curly operator for rlang
    :commands R
    ;; :bind (:map ess-r-mode-map
    ;;        (";" . ess-insert-assign)
    ;;        ;; RStudio equivalents
    ;;        ("M--" . ess-insert-assign)
    ;;        ("C-S-m" . japhir/insert-r-pipe)
    ;;        :map inferior-ess-r-mode-map
    ;;        (";" . ess-insert-assign)
    ;;        ("M--" . ess-insert-assign)
    ;;        ("C-S-m" . japhir/insert-r-pipe))
    :config
    (defun my-org-confirm-babel-evaluate (lang body)
      (not (or (string= lang "R")
               (string= lang "elisp")
               (string= lang "emacs-lisp")
               (string= lang "latex"))))
    (setq display-buffer-alist
          '(("*R"
             (display-buffer-reuse-window display-buffer-pop-up-frame)
             (reusable-frames . 0)))
          ess-help-own-frame 'one
          ess-auto-width 'frame
          org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate
          ess-style 'RStudio
          ess-use-auto-complete nil
          ess-use-company t
          ess-indent-with-fancy-comments nil
          ess-pdf-viewer-pref 'emacsclient
          inferior-R-args "--no-restore-history --no-save"
          ess-ask-for-ess-directory nil
          ess-R-font-lock-keywords
          (quote
           ((ess-R-fl-keyword:modifiers)
            (ess-R-fl-keyword:fun-defs . t)
            (ess-R-fl-keyword:keywords . t)
            (ess-R-fl-keyword:assign-ops . t)
            (ess-R-fl-keyword:constants . t)
            (ess-R-fl-keyword:fun-cals . t)
            (ess-R-fl-keyword:numbers)
            (ess-R-fl-keyword:operators . t)
            (ess-R-fl-keyword:delimiters)
            (ess-R-fl-keyword:=)
            (ess-R-fl-keyword:F&T)))))

#+END_SRC

#+RESULTS:
: t
* Rust
  Look at this [[https://www.reddit.com/r/emacs/comments/cw96wp/my_emacs26_setup_for_rust/][link]]
  pre-requisites
    - rustup default nightly
    - cargo component add rust-src
    - cargo xtask install rust-analyzer
     git clone https://github.com/rust-analyzer/rust-analyzer.git && cd rust-analyzer
     cargo xtask install --server
#+BEGIN_SRC emacs-lisp


(use-package rust-mode
   :ensure t
   :mode ("\\.rs\\'" . rust-mode)
   :bind (:map rust-mode-map
            ("C-c C-c" . 'rust-compile)
            ("C-c C-r" . 'rust-run-clippy))
   :hook ((rust-mode . lsp)
          (rust-mode . company-mode))

   :config
   (progn


   (use-package lsp-rust
      ;;:ensure t
      :load-path "lisp/lsp-rust.el")

   (use-package flycheck-rust
      :ensure t
      :after rust-mode)


     (setq rust-format-on-save t)
     (setq lsp-rust-server 'rust-analyzer)
     (setq lsp-rust-analyzer-server-command '("~/.cargo/bin/rust-analyzer"))

     ;;(add-hook 'rust-mode-hook 'lsp)
     ;;(add-hook 'rust-mode-hook 'company-mode)
     (add-hook 'flycheck-mode-hook 'flycheck-rust-setup)
     (add-hook 'rust-mode-hook (lambda () (linum-mode 1)))
     (push 'company-lsp company-backends)
     )

)

(use-package cargo
   :ensure t
   :config
   (progn
     (add-hook 'rust-mode-hook 'cargo-minor-mode)
     (add-hook 'toml-mode-hook 'cargo-minor-mode)
   )
)

#+END_SRC

#+RESULTS:
: t
