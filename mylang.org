#+STARTUP: overview
* Prog mode
#+BEGIN_SRC emacs-lisp

  (when window-system
    (use-package prog-mode
      ;; Force fringe indicators
      :hook (prog-mode . mb/enable-visual-line-fringe-indicators)
      :config
      (defun mb/enable-visual-line-fringe-indicators ()
        "Enable visual-line fringe-indicators."
        (setq-local visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))) )
  )

#+END_SRC
* iedit
  - Idiom for automatically deploying multiple cursors for edit all occurrences of a particular word
    #+begin_src emacs-lisp :tangle yes
      (use-package iedit
        :ensure t)
    #+end_src
* LSP
  :PROPERTIES:
  :ID:       9d2cdcfe-5831-432f-b0a4-603c1f1a8f2e
  :END:
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :init (setq lsp-keymap-prefix "C-c l")
    :hook (
          (c-mode . lsp-deferred)
          (ess-r-mode . lsp-deferred)
          (c++-mode . lsp-deferred)
          (python-mode . lsp-deferred)
          )
    :custom
    (lsp-enable-snippet t)
    (lsp-prefer-flymake nil)
    :bind (:map lsp-mode-map("C-C C-f" . lsp-format-buffer))
    :config
      (setq lsp-prefer-flymake nil)
      (setq lsp-diagnostics-provider :flycheck)
      (setq lsp-diagnostics-flycheck-default-level 'warning)
      )

  (use-package treemacs
    :ensure t
    :defer t
    :config
    (setq treemacs-no-png-images t
            treemacs-width 24)
    :bind ("C-c t" . treemacs))


    (use-package lsp-treemacs
      :ensure t
      :after (lsp-mode treemacs)
      :commands lsp-treemacs-errors-list)
      :config
      (setq lsp-treemacs-sync-mode 1)


    (use-package lsp-ui
      :ensure t
      :requires lsp-mode flymode flycheck
      :commands lsp-ui-mode
      :defer t
      :config
      (setq lsp-ui-doc-delay 2)
      (setq lsp-ui-sideline-enable nil)
      (setq lsp-ui-sideline-show-hover t)
      (setq lsp-ui-doc-position 'bottom)
      ;(lsp-ui-doc-show)
      :hook (
            (lsp-mode . lsp-ui-mode)
            (c-mode . flycheck-mode)
            (c++mode . flycheck-mode)
            (python-mode . flycheck-mode)
            )
      :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references)
                ("C-c i" . lsp-ui-imenu))
      :config
      (setq lsp-ui-doc-enable nil)
      (setq lsp-ui-doc-header t)
      (setq lsp-ui-doc-include-signature t)
      (setq lsp-ui-doc-max-width 120)
      (setq lsp-ui-doc-max-height 20)
      (setq lsp-ui-doc-delay 0.5)
      (setq lsp-ui-doc-use-childframe t)
      (setq lsp-ui-peek-enable t)
      (setq lsp-ui-peek-peek-height 20)
      (setq lsp-ui-peek-fontify 'on-demand)
      (setq lsp-ui-imenu-window-width 0)
      (setq lsp-ui-imenu-kind-position 'top)
      (defvar lsp-ui-imenu-mode-hook nil)
      (add-hook 'lsp-ui-imenu-mode-hook
                #'(lambda ()
                    (setq-local truncate-partial-width-windows t)))
      (define-key lsp-ui-imenu-mode-map (kbd "C-c C-n") 'lsp-ui-imenu--next-kind)
      (define-key lsp-ui-imenu-mode-map (kbd "C-c C-p") 'lsp-ui-imenu--prev-kind)
      (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
      (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))


#+END_SRC

#+RESULTS:
* Debug server
  :PROPERTIES:
  :ID:       6857b5d9-b720-4431-8eb7-eca2f4b2568a
  :END:
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :ensure t
    :defer t
    :after lsp-mode
    :commands (dap-debug dap-debug-edit-template)
    :config
    (dap-auto-configure-mode))
#+END_SRC
* C / C++ language configuration
  :PROPERTIES:
  :ID:       b3bfae62-1193-45d4-a698-48a886e8bd09
  :END:
#+BEGIN_SRC emacs-lisp
  ;; Default offset in all languages is 4 spaces
  ;;

  (use-package irony
      :ensure t
      :config
      (use-package company-irony
        :ensure t
        :config
        (add-to-list 'company-backends 'company-irony))

      (use-package company-irony-c-headers
         :ensure t
         :config
           (add-to-list 'company-backends 'company-irony-c-headers))

      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'objc-mode-hook 'irony-mode)

      ;; replace the `completion-at-point' and `complete-symbol' bindings in
      ;; irony-mode's buffers by irony-mode's function
      (defun my-irony-mode-hook ()
         (define-key irony-mode-map [remap completion-at-point]
           'irony-completion-at-point-async)
         (define-key irony-mode-map [remap complete-symbol]
           'irony-completion-at-point-async))
      (add-hook 'irony-mode-hook 'my-irony-mode-hook)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  )

  (setq c-basic-offset 4)

  ;; cc-mode (the mode you're in when editing C, C++, and Objective C files)
  ;;
  (setq c-default-style "linux")
  (setq-default indent-tabs-mode nil)

  ;; Tell cc-mode not to check for old-style (K&R) function declarations.
  ;; This speeds up indenting a lot.
  (setq c-recognize-knr-p nil)

  (add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))

  ;; Change the indentation amount to 4 spaces instead of 2.
  ;; You have to do it in this complicated way because of the
  ;; strange way the cc-mode initializes the value of `c-basic-offset'.
  (add-hook 'c-mode-hook (lambda () (setq c-basic-offset 4)))
  (add-hook 'c++-mode-hook (lambda () (setq c-basic-offset 4)))

  (add-hook 'c++-mode-hook (lambda () (highlight-lines-matching-regexp ".\{91\}" "hi-green-b")))

  (add-hook 'c-mode-hook (lambda () (linum-mode 1)))
  (add-hook 'cc-mode-hook (lambda () (linum-mode 1)))
  (add-hook 'c++-mode-hook (lambda () (linum-mode 1)))

  (add-hook 'c-mode-hook (lambda () (show-paren-mode 1)))
  (add-hook 'cc-mode-hook (lambda () (show-paren-mode 1)))
  (add-hook 'c++-mode-hook (lambda () (show-paren-mode 1)))

  (add-hook 'c-mode-hook 'projectile-mode)
  (add-hook 'cc-mode-hook 'projectile-mode)
  (add-hook 'c++-mode-hook 'projectile-mode)


#+END_SRC
* Yasnippets
  :PROPERTIES:
  :ID:       28ce112d-6e7b-4aa1-bf97-f20b94388b0d
  :END:
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
   :ensure t
   :hook (prog-mode . yas-minor-mode)
   :hook (org-mode . yas-minor-mode)
   :config
   (use-package yasnippet-snippets
       :ensure t
       :pin melpa)

   (yas-reload-all))
#+END_SRC

#+RESULTS:
| yas-minor-mode |
* Python language configuration
  :PROPERTIES:
  :ID:       5566bb11-5568-45af-92ff-31ffad6b8b81
  :END:
 - sets automatic guess of the python offset but silences the warnings
 - for windows Python or ipython must be in the path
#+BEGIN_SRC emacs-lisp
    (use-package python
      :ensure nil          ; use internal python-mode
      :hook  ((python-mode . linum-mode)
              (python-mode . show-paren-mode)
              (python-mode . lsp-deferred)
              )
      :config
      ;; dap mode for debugging
      (require 'dap-python)


      ;; Remove guess indent python message
      (setq python-indent-guess-indent-offset-verbose nil)

      ;; remove trailing white space before saving
      (add-hook 'before-save-hook 'delete-trailing-whitespace)

      ;; Use IPython when available or fall back to regular Python
      (cond
       ((executable-find "ipython")
        (progn
          (setq python-shell-buffer-name "IPython")
          (setq python-shell-interpreter "ipython")
          (setq python-shell-interpreter-args "-i --simple-prompt")))
       ((executable-find "python3")
        (setq python-shell-interpreter "python3"))
       ((executable-find "python2")
        (setq python-shell-interpreter "python2"))
       (t
        (setq python-shell-interpreter "python"))))

    ;; Hide the modeline for inferior python processes
    (use-package inferior-python-mode
      :ensure nil
      :hook (inferior-python-mode . hide-mode-line-mode))

    ;; Required to hide the modeline
    (use-package hide-mode-line
      :ensure t
      :defer t)

    ;; Required to easily switch virtual envs
    ;; via the menu bar or with `pyvenv-workon`
    ;; Setting the `WORKON_HOME` environment variable points
    ;; at where the envs are located. I use miniconda.
    (use-package pyvenv
      :ensure t
      :defer t
      :after python
      :config
      ;; Setting work on to easily switch between environments
      (setenv "WORKON_HOME" (expand-file-name "~/.virtualenvs/"))
      ;; Display virtual envs in the menu bar
      (setq pyvenv-menu t)
      ;; Restart the python process when switching environments
      (add-hook 'pyvenv-post-activate-hooks (lambda ()
                                              (pyvenv-restart-python)))
      :hook (python-mode . pyvenv-mode))



  ;; Format the python buffer following YAPF rules
  ;; There's also blacken if you like it better.
  (use-package yapfify
    :ensure t
    :defer t
    :hook (python-mode . yapf-mode))


  (use-package lsp-pyright
    :ensure t
    :after lsp-mode
    :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                       (lsp-deferred)))
    :custom
    (lsp-pyright-auto-import-completions nil)
    (lsp-pyright-typechecking-mode "off")
    :config
    (mb/async-process
     "npm outdated -g | grep pyright | wc -l" nil
     (lambda (process output)
       (pcase output
         ("0\n" (message "Pyright is up to date."))
         ("1\n" (message "A pyright update is available."))))))


   ;; (use-package lsp-python-ms
   ;;     :disabled t
   ;;     :ensure t
   ;;     :init
   ;;        (setq lsp-pyhton-ms-auto-install-server t)
   ;;     :hook
   ;;     (python-mode . (lambda ()
   ;;                      (require 'lsp-python-ms)
   ;;                      (lsp-deferred)))   ; lsp or lsp-deferred
   ;;     (flycheck-mode . (lambda ()
   ;;                      (flycheck-add-next-checker 'lsp 'python-flake8)
   ;;                      (message "Added flycheck checkers."))))


   ;;      ;; ensure:
        ;;; pip install jedi
        ;;  pip install flake8
        ;;  pip install importmagic
        ;;  pip install autopep8
        ;;  pip install yapf
        ;;  pip install python-language-sever[all]

        ;; (use-package elpy
        ;;   :ensure nil
        ;;   :init (advice-add 'python-mode :before 'elpy-enable)
        ;;   :hook (elpy-mode . flycheck-mode)
        ;;   :hook (elpy-mode . show-paren-mode)
        ;;   :hook (elpy-mode . linum-mode)
        ;;   :config
        ;;   (progn
        ;;     (setq
        ;;       python-shell-interpreter "ipython3"
        ;;       python-shell-interpreter-args "--simple-prompt -i"
        ;;       elpy-rpc-backend "jedi"
        ;;       elpy-rpc-project-specfic 't)
        ;;     (when (fboundp 'flycheck-mode)
        ;;       (setq elpy-modules (delete 'elpy-module-flymake elpy-modules)))
        ;;     (add-hook 'elpy-mode-hook
        ;;       (lambda ()
        ;;         (set (make-local-variable 'company-backends)
        ;;          (append company-backends '(company-yasnippet)))))

        ;;     ;;;(add-hook 'elpy-mode-hook (lambda () (linum-mode 1)))
        ;;     (add-hook 'before-save-hook 'delete-trailing-whitespace)
        ;;     (add-hook 'python-mode-hook (lambda() (auto-complete-mode -1)))
        ;;     )
        ;; )


#+END_SRC

* EIN-  emacs Jupiter notebooks
   :PROPERTIES:
   :ID:       f1de85a7-c17b-40d7-acad-bbacb217f6f8
   :END:
#+BEGIN_SRC emacs-lisp
  (use-package anaphora
    :ensure t)

  (use-package ein
    :ensure t
    :commands (ein:notebooklist-open ein:run)
    )
#+END_SRC

#+RESULTS:

* Lua configuration - lua mode
  :PROPERTIES:
  :ID:       e2637830-fd58-4dea-bb06-2afb761fcc8f
  :END:
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (cons '("\\.lua$" . lua-mode) auto-mode-alist))
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)

(add-hook 'lua-mode-hook 'turn-on-font-lock)
;;;If you want to use hideshow, turn on hs-minor-mode or add this:
;(add-hook 'lua-mode-hook 'hs-minor-mode)
(add-hook 'lua-mode-hook (lambda () (linum-mode 1)))

#+END_SRC
* Mark-down mode and enable auto-correction
  :PROPERTIES:
  :ID:       17d2b23e-8266-4539-b057-f98b649b5fb8
  :END:
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure  t
    :defer   t
    :mode    ("\\.\\(markdown\\|mdown\\|md\\)$" . markdown-mode)
    :hook  ((markdown-mode . visual-line-mode)
            (markdown-mode . writegood-mode)
            (markdown-mode . flyspell-mode))
    :config
    (progn
      (setq markdown-command "pandoc --smart -f markdown -t html")
    )
  )
#+END_SRC
* Lisp - enable slime (disabled)
  :PROPERTIES:
  :ID:       c9adce4f-27f5-4e6b-be19-76f5a0cf16dd
  :END:
#+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure t
  :after lisp
  :config
  (progn
    (add-hook
     'slime-load-hook
     #'(lambda ()
	 (slime-setup
	  '(slime-fancy
	    slime-repl
	    slime-fuzzy))))
    (setq slime-net-coding-system 'utf-8-unix)
    (add-hook 'lisp-mode-hook (lambda () (linum-mode 1)))

    ;; Slime and Auto-Complete
    (use-package ac-slime
      :ensure t
      :init
      (progn
	(add-hook 'slime-mode-hook 'set-up-slime-ac)
	(add-hook 'slime-repl-mode-hook 'set-up-slime-ac))
      :config
      (progn
	(eval-after-load "auto-complete"
	  '(add-to-list 'ac-modes 'slime-repl-mode))))))



(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)
(add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
(add-hook 'lisp-mode-hook             'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'scheme-mode-hook           'enable-paredit-mode)
;; slime



;;(load (expand-file-name "~/quicklisp/slime-helper.el"))

(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)


(setq inferior-lisp-program "sbcl")

;; Stop SLIME's REPL from grabbing DEL,
;; which is annoying when backspacing over a '('
;;(defun override-slime-repl-bindings-with-paredit ()
;;  (define-key slime-repl-mode-map
;;    (read-kbd-macro paredit-backward-delete-key)
;;    nil))
;;(add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)


;;(add-hook 'lisp-mode-hook (lambda () (linum-mode 1)))
#+END_SRC

#+RESULTS:
: sbcl
* Markdown
  :PROPERTIES:
  :ID:       521070f8-9e10-4eed-b326-b2af63426333
  :END:
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
   :ensure markdown-mode
   :defer t
   :mode ("\\.\\(markdown\\|mdown\\|md\\)$" . markdown-mode)
   :config
   (progn
     (add-hook 'markdown-mode-hook
       (lambda ()
           (visual-line-mode t)
           (writegood-mode t)
           (flyspell-mode t)))

       (cond
         ((string-equal system-type "windows-nt") ; windows
           (setq markdown-command "pandoc.exe -f markdown+smart -t html"))
         ((string-equal system-type "gnu/linux") ; linux
           (setq markdown-command "pandoc --smart -f markdown -t html"))))
)
(use-package markdown-preview-mode
    :ensure markdown-preview-mode
    :defer t
)

#+END_SRC
* ESS - R
  :PROPERTIES:
  :ID:       0fabfe30-20dd-4648-8f52-ab492f0e0301
  :END:
#+BEGIN_SRC emacs-lisp
    (defun japhir/insert-r-pipe ()
      "Insert the pipe operator in R, %>%"
      (interactive)
      (just-one-space 1)
      (insert "%>%")
      (reindent-then-newline-and-indent))

    (use-package ess
      ;; :load-path "/usr/share/emacs/site-lisp/ess/"
      :ensure t
      :pin melpa-stable
      ;; :init (require 'ess-site)  ;; seems like this is needed to load the minor modes as well keybindings don't work without it
      ;; :hook ((ess-r-mode inferior-ess-r-mode) . electric-layout-mode)  ;; commented out since new curly-curly operator for rlang
      :hook  ((ess-mode . linum-mode)
              (ess-mode . show-paren-mode)
              (ess-mode . flycheck-mode)
            )

      :commands R
      ;; :bind (:map ess-r-mode-map
      ;;        (";" . ess-insert-assign)
      ;;        ;; RStudio equivalents
      ;;        ("M--" . ess-insert-assign)
      ;;        ("C-S-m" . japhir/insert-r-pipe)
      ;;        :map inferior-ess-r-mode-map
      ;;        (";" . ess-insert-assign)
      ;;        ("M--" . ess-insert-assign)
      ;;        ("C-S-m" . japhir/insert-r-pipe))
      :config
      (defun my-org-confirm-babel-evaluate (lang body)
        (not (or (string= lang "R")
                 (string= lang "elisp")
                 (string= lang "emacs-lisp")
                 (string= lang "latex"))))
      (add-hook 'before-save-hook 'delete-trailing-whitespace)
      (setq display-buffer-alist
            '(("*R"
               (display-buffer-reuse-window display-buffer-pop-up-frame)
               (reusable-frames . 0)))
            ess-help-own-frame 'one
            ess-auto-width 'frame
            org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate
            ess-style 'RStudio
            ess-use-auto-complete nil
            ess-use-company t
            ess-indent-with-fancy-comments nil
            ess-pdf-viewer-pref 'emacsclient
            inferior-R-args "--no-restore-history --no-save"
            ess-ask-for-ess-directory nil
            ess-R-font-lock-keywords
            (quote
             ((ess-R-fl-keyword:modifiers)
              (ess-R-fl-keyword:fun-defs . t)
              (ess-R-fl-keyword:keywords . t)
              (ess-R-fl-keyword:assign-ops . t)
              (ess-R-fl-keyword:constants . t)
              (ess-R-fl-keyword:fun-cals . t)
              (ess-R-fl-keyword:numbers)
              (ess-R-fl-keyword:operators . t)
              (ess-R-fl-keyword:delimiters)
              (ess-R-fl-keyword:=)
              (ess-R-fl-keyword:F&T))))
      (add-hook 'ess-r-mode-hook (lambda () (linum-mode 1)))
  )

#+END_SRC

#+RESULTS:
| flycheck-mode | show-paren-mode | linum-mode | ess-r-setup-flymake |
* Rust
  :PROPERTIES:
  :ID:       fd711fc9-8529-4b29-bab9-ea32b44371eb
  :END:
  Look at this [[https://www.reddit.com/r/emacs/comments/cw96wp/my_emacs26_setup_for_rust/][link]]
  pre-requisites
    - rustup default nightly
    - cargo component add rust-src
    - cargo xtask install rust-analyzer
     git clone https://github.com/rust-analyzer/rust-analyzer.git && cd rust-analyzer
     cargo xtask install --server
#+BEGIN_SRC emacs-lisp


  (use-package rust-mode
     :ensure t
     :mode ("\\.rs\\'" . rust-mode)
     :bind (:map rust-mode-map
              ("C-c C-c" . 'rust-compile)
              ("C-c C-r" . 'rust-run-clippy))
     :hook ((rust-mode . lsp)
            (rust-mode . company-mode))

     :config
     (progn


  ;;   (use-package lsp-rust
  ;;      :ensure t)

     (use-package flycheck-rust
        :ensure t
        :after rust-mode)
        :config
        (setq rust-format-on-save t)
        (setq lsp-rust-server 'rust-analyzer)
        (setq lsp-rust-analyzer-server-command '("/home/manuel/projects/rust/rust-analyzer/target/release/rust-analyzer"))

        (add-hook 'rust-mode-hook 'lsp)
        (add-hook 'rust-mode-hook 'company-mode)
        (add-hook 'rust-mode-hook (lambda () (linum-mode 1)))
        (add-hook 'flycheck-mode-hook 'flycheck-rust-setup)
        (add-hook 'rust-mode-hook (lambda () (linum-mode 1)))
        ;;(push 'company-lsp company-backends)
       )

  )

  (use-package cargo
     :ensure t
     :config
     (progn
       (add-hook 'rust-mode-hook 'cargo-minor-mode)
       (add-hook 'toml-mode-hook 'cargo-minor-mode)
     )
  )

#+END_SRC

#+RESULTS:
: t
