;; Object pykalman/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "pykalman/"
  :tables
  (list
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("'''
=============
Kalman Module
=============

This module provides inference methods for state-space estimation in continuous
spaces.
'''" code nil nil [1 139])
            ("KalmanFilter" include nil nil [156 175])
            ("UnscentedKalmanFilter" include nil nil [192 251])
            ("AdditiveUnscentedKalmanFilter" include nil nil [192 251])
            ("__all__" variable nil nil [253 379]))          
      :file "__init__.py"
      :pointmax 380
      :fsize 379
      :lastmodtime '(21850 63014 0 0)
      :unmatched-syntax '((FROM 176 . 180) (PERIOD 181 . 182) (FROM 141 . 145) (PERIOD 146 . 147)))
    (semanticdb-table "standard.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
=====================================
Inference for Linear-Gaussian Systems
=====================================

This module implements the Kalman Filter, Kalman Smoother, and
EM Algorithm for Linear-Gaussian state space models
\"\"\"" code nil nil [1 238])
            ("warnings" include nil nil [239 254])
            ("numpy" include nil nil [256 274])
            ("scipy" include nil nil [275 299])
            ("preprocess_arguments" include nil nil [313 429])
            ("log_multivariate_normal_density" include nil nil [313 429])
            ("get_params" include nil nil [313 429])
            ("check_random_state" include nil nil [313 429])
            ("array2d" include nil nil [313 429])
            ("array1d" include nil nil [313 429])
            ("DIM" variable nil nil [503 761])
            ("_arg_or_default" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [784 787])
                ("default" variable nil (reparse-symbol function_parameters) [789 796])
                ("dim" variable nil (reparse-symbol function_parameters) [798 801])
                ("name" variable nil (reparse-symbol function_parameters) [803 807]))              ) nil [764 1092])
            ("_determine_dimensionality" function
               (:documentation "Derive the dimensionality of the state space

    Parameters
    ----------
    variables : list of ({None, array}, conversion function, index)
        variables, functions to convert them to arrays, and indices in those
        arrays to derive dimensionality from.
    default : {None, int}
        default dimensionality to return if variables is empty

    Returns
    -------
    dim : int
        dimensionality of state space as derived from variables or default.
    "
                :arguments 
                  ( ("variables" variable nil (reparse-symbol function_parameters) [1124 1133])
                    ("default" variable nil (reparse-symbol function_parameters) [1135 1142]))                  )
                nil [1094 2331])
            ("_last_dims" function
               (:documentation "Extract the final dimensions of `X`

    Extract the final `ndim` dimensions at index `t` if `X` has >= `ndim` + 1
    dimensions, otherwise return `X`.

    Parameters
    ----------
    X : array with at least dimension `ndims`
    t : int
        index to use for the `ndims` + 1th dimension
    ndims : int, optional
        number of dimensions in the array desired

    Returns
    -------
    Y : array with dimension `ndims`
        the final `ndims` dimensions indexed by `t`
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [2348 2349])
                    ("t" variable nil (reparse-symbol function_parameters) [2351 2352])
                    ("ndims" variable nil (reparse-symbol function_parameters) [2354 2359]))                  )
                nil [2333 3128])
            ("_loglikelihoods" function
               (:documentation "Calculate log likelihood of all observations

    Parameters
    ----------
    observation_matrices : [n_timesteps, n_dim_obs, n_dim_obs] or [n_dim_obs,
    n_dim_state] array
        observation matrices for t in [0...n_timesteps-1]
    observation_offsets : [n_timesteps, n_dim_obs] or [n_dim_obs] array
        offsets for observations for t = [0...n_timesteps-1]
    observation_covariance : [n_dim_obs, n_dim_obs] array
        covariance matrix for all observations
    predicted_state_means : [n_timesteps, n_dim_state] array
        mean of state at time t given observations from times
        [0...t-1] for t in [0...n_timesteps-1]
    predicted_state_covariances : [n_timesteps, n_dim_state, n_dim_state] array
        covariance of state at time t given observations from times
        [0...t-1] for t in [0...n_timesteps-1]
    observations : [n_dim_obs] array
        All observations.  If `observations[t]` is a masked array and any of
        its values are masked, the observation will be ignored.

    Returns
    -------
    loglikelihoods: [n_timesteps] array
        `loglikelihoods[t]` is the probability density of the observation
        generated at time step t
    "
                :arguments 
                  ( ("observation_matrices" variable nil (reparse-symbol function_parameters) [3150 3170])
                    ("observation_offsets" variable nil (reparse-symbol function_parameters) [3172 3191])
                    ("observation_covariance" variable nil (reparse-symbol function_parameters) [3213 3235])
                    ("predicted_state_means" variable nil (reparse-symbol function_parameters) [3237 3258])
                    ("predicted_state_covariances" variable nil (reparse-symbol function_parameters) [3280 3307])
                    ("observations" variable nil (reparse-symbol function_parameters) [3309 3321]))                  )
                nil [3130 5819])
            ("_filter_predict" function (:arguments 
              ( ("transition_matrix" variable nil (reparse-symbol function_parameters) [5841 5858])
                ("transition_covariance" variable nil (reparse-symbol function_parameters) [5860 5881])
                ("transition_offset" variable nil (reparse-symbol function_parameters) [5903 5920])
                ("current_state_mean" variable nil (reparse-symbol function_parameters) [5922 5940])
                ("current_state_covariance" variable nil (reparse-symbol function_parameters) [5962 5986]))              ) nil [5821 7515])
            ("_filter_correct" function (:arguments 
              ( ("observation_matrix" variable nil (reparse-symbol function_parameters) [7537 7555])
                ("observation_covariance" variable nil (reparse-symbol function_parameters) [7557 7579])
                ("observation_offset" variable nil (reparse-symbol function_parameters) [7601 7619])
                ("predicted_state_mean" variable nil (reparse-symbol function_parameters) [7621 7641])
                ("predicted_state_covariance" variable nil (reparse-symbol function_parameters) [7663 7689])
                ("observation" variable nil (reparse-symbol function_parameters) [7691 7702]))              ) nil [7517 10469])
            ("_filter" function
               (:documentation "Apply the Kalman Filter

    Calculate posterior distribution over hidden states given observations up
    to and including the current time step.

    Parameters
    ----------
    transition_matrices : [n_timesteps-1,n_dim_state,n_dim_state] or
    [n_dim_state,n_dim_state] array-like
        state transition matrices
    observation_matrices : [n_timesteps, n_dim_obs, n_dim_obs] or [n_dim_obs, \\
    n_dim_obs] array-like
        observation matrix
    transition_covariance : [n_timesteps-1,n_dim_state,n_dim_state] or
    [n_dim_state,n_dim_state] array-like
        state transition covariance matrix
    observation_covariance : [n_timesteps, n_dim_obs, n_dim_obs] or [n_dim_obs,
    n_dim_obs] array-like
        observation covariance matrix
    transition_offsets : [n_timesteps-1, n_dim_state] or [n_dim_state] \\
    array-like
        state offset
    observation_offsets : [n_timesteps, n_dim_obs] or [n_dim_obs] array-like
        observations for times [0...n_timesteps-1]
    initial_state_mean : [n_dim_state] array-like
        mean of initial state distribution
    initial_state_covariance : [n_dim_state, n_dim_state] array-like
        covariance of initial state distribution
    observations : [n_timesteps, n_dim_obs] array
        observations from times [0...n_timesteps-1].  If `observations` is a
        masked array and any of `observations[t]` is masked, then
        `observations[t]` will be treated as a missing observation.

    Returns
    -------
    predicted_state_means : [n_timesteps, n_dim_state] array
        `predicted_state_means[t]` = mean of hidden state at time t given
        observations from times [0...t-1]
    predicted_state_covariances : [n_timesteps, n_dim_state, n_dim_state] array
        `predicted_state_covariances[t]` = covariance of hidden state at time t
        given observations from times [0...t-1]
    kalman_gains : [n_timesteps, n_dim_state] array
        `kalman_gains[t]` = Kalman gain matrix for time t
    filtered_state_means : [n_timesteps, n_dim_state] array
        `filtered_state_means[t]` = mean of hidden state at time t given
        observations from times [0...t]
    filtered_state_covariances : [n_timesteps, n_dim_state] array
        `filtered_state_covariances[t]` = covariance of hidden state at time t
        given observations from times [0...t]
    "
                :arguments 
                  ( ("transition_matrices" variable nil (reparse-symbol function_parameters) [10483 10502])
                    ("observation_matrices" variable nil (reparse-symbol function_parameters) [10504 10524])
                    ("transition_covariance" variable nil (reparse-symbol function_parameters) [10526 10547])
                    ("observation_covariance" variable nil (reparse-symbol function_parameters) [10561 10583])
                    ("transition_offsets" variable nil (reparse-symbol function_parameters) [10585 10603])
                    ("observation_offsets" variable nil (reparse-symbol function_parameters) [10605 10624])
                    ("initial_state_mean" variable nil (reparse-symbol function_parameters) [10638 10656])
                    ("initial_state_covariance" variable nil (reparse-symbol function_parameters) [10658 10682])
                    ("observations" variable nil (reparse-symbol function_parameters) [10684 10696]))                  )
                nil [10471 15085])
            ("_smooth_update" function (:arguments 
              ( ("transition_matrix" variable nil (reparse-symbol function_parameters) [15106 15123])
                ("filtered_state_mean" variable nil (reparse-symbol function_parameters) [15125 15144])
                ("filtered_state_covariance" variable nil (reparse-symbol function_parameters) [15165 15190])
                ("predicted_state_mean" variable nil (reparse-symbol function_parameters) [15192 15212])
                ("predicted_state_covariance" variable nil (reparse-symbol function_parameters) [15233 15259])
                ("next_smoothed_state_mean" variable nil (reparse-symbol function_parameters) [15261 15285])
                ("next_smoothed_state_covariance" variable nil (reparse-symbol function_parameters) [15306 15336]))              ) nil [15087 17822])
            ("_smooth" function
               (:documentation "Apply the Kalman Smoother

    Estimate the hidden state at time for each time step given all
    observations.

    Parameters
    ----------
    transition_matrices : [n_timesteps-1, n_dim_state, n_dim_state] or \\
    [n_dim_state, n_dim_state] array
        `transition_matrices[t]` = transition matrix from time t to t+1
    filtered_state_means : [n_timesteps, n_dim_state] array
        `filtered_state_means[t]` = mean state estimate for time t given
        observations from times [0...t]
    filtered_state_covariances : [n_timesteps, n_dim_state, n_dim_state] array
        `filtered_state_covariances[t]` = covariance of state estimate for time
        t given observations from times [0...t]
    predicted_state_means : [n_timesteps, n_dim_state] array
        `predicted_state_means[t]` = mean state estimate for time t given
        observations from times [0...t-1]
    predicted_state_covariances : [n_timesteps, n_dim_state, n_dim_state] array
        `predicted_state_covariances[t]` = covariance of state estimate for
        time t given observations from times [0...t-1]

    Returns
    -------
    smoothed_state_means : [n_timesteps, n_dim_state]
        mean of hidden state distributions for times [0...n_timesteps-1] given
        all observations
    smoothed_state_covariances : [n_timesteps, n_dim_state, n_dim_state] array
        covariance matrix of hidden state distributions for times
        [0...n_timesteps-1] given all observations
    kalman_smoothing_gains : [n_timesteps-1, n_dim_state, n_dim_state] array
        Kalman Smoothing correction matrices for times [0...n_timesteps-2]
    "
                :arguments 
                  ( ("transition_matrices" variable nil (reparse-symbol function_parameters) [17836 17855])
                    ("filtered_state_means" variable nil (reparse-symbol function_parameters) [17857 17877])
                    ("filtered_state_covariances" variable nil (reparse-symbol function_parameters) [17891 17917])
                    ("predicted_state_means" variable nil (reparse-symbol function_parameters) [17919 17940])
                    ("predicted_state_covariances" variable nil (reparse-symbol function_parameters) [17954 17981]))                  )
                nil [17824 20801])
            ("_smooth_pair" function (:arguments 
              ( ("smoothed_state_covariances" variable nil (reparse-symbol function_parameters) [20820 20846])
                ("kalman_smoothing_gain" variable nil (reparse-symbol function_parameters) [20848 20869]))              ) nil [20803 21907])
            ("_em" function
               (:documentation "Apply the EM Algorithm to the Linear-Gaussian model

    Estimate Linear-Gaussian model parameters by maximizing the expected log
    likelihood of all observations.

    Parameters
    ----------
    observations : [n_timesteps, n_dim_obs] array
        observations for times [0...n_timesteps-1].  If observations is a
        masked array and any of observations[t] is masked, then it will be
        treated as a missing observation.
    transition_offsets : [n_dim_state] or [n_timesteps-1, n_dim_state] array
        transition offset
    observation_offsets : [n_dim_obs] or [n_timesteps, n_dim_obs] array
        observation offsets
    smoothed_state_means : [n_timesteps, n_dim_state] array
        smoothed_state_means[t] = mean of state at time t given all
        observations
    smoothed_state_covariances : [n_timesteps, n_dim_state, n_dim_state] array
        smoothed_state_covariances[t] = covariance of state at time t given all
        observations
    pairwise_covariances : [n_timesteps, n_dim_state, n_dim_state] array
        pairwise_covariances[t] = covariance between states at times t and
        t-1 given all observations.  pairwise_covariances[0] is ignored.
    given: dict
        if one of the variables EM is capable of predicting is in given, then
        that value will be used and EM will not attempt to estimate it.  e.g.,
        if 'observation_matrix' is in given, observation_matrix will not be
        estimated and given['observation_matrix'] will be returned in its
        place.

    Returns
    -------
    transition_matrix : [n_dim_state, n_dim_state] array
        estimated transition matrix
    observation_matrix : [n_dim_obs, n_dim_state] array
        estimated observation matrix
    transition_offsets : [n_dim_state] array
        estimated transition offset
    observation_offsets : [n_dim_obs] array
        estimated observation offset
    transition_covariance : [n_dim_state, n_dim_state] array
        estimated covariance matrix for state transitions
    observation_covariance : [n_dim_obs, n_dim_obs] array
        estimated covariance matrix for observations
    initial_state_mean : [n_dim_state] array
        estimated mean of initial state distribution
    initial_state_covariance : [n_dim_state] array
        estimated covariance of initial state distribution
    "
                :arguments 
                  ( ("observations" variable nil (reparse-symbol function_parameters) [21917 21929])
                    ("transition_offsets" variable nil (reparse-symbol function_parameters) [21931 21949])
                    ("observation_offsets" variable nil (reparse-symbol function_parameters) [21951 21970])
                    ("smoothed_state_means" variable nil (reparse-symbol function_parameters) [21980 22000])
                    ("smoothed_state_covariances" variable nil (reparse-symbol function_parameters) [22002 22028])
                    ("pairwise_covariances" variable nil (reparse-symbol function_parameters) [22030 22050])
                    ("given" variable nil (reparse-symbol function_parameters) [22060 22065]))                  )
                nil [21909 26820])
            ("_em_observation_matrix" function (:arguments 
              ( ("observations" variable nil (reparse-symbol function_parameters) [26849 26861])
                ("observation_offsets" variable nil (reparse-symbol function_parameters) [26863 26882])
                ("smoothed_state_means" variable nil (reparse-symbol function_parameters) [26910 26930])
                ("smoothed_state_covariances" variable nil (reparse-symbol function_parameters) [26932 26958]))              ) nil [26822 27971])
            ("_em_observation_covariance" function (:arguments 
              ( ("observations" variable nil (reparse-symbol function_parameters) [28004 28016])
                ("observation_offsets" variable nil (reparse-symbol function_parameters) [28018 28037])
                ("transition_matrices" variable nil (reparse-symbol function_parameters) [28069 28088])
                ("smoothed_state_means" variable nil (reparse-symbol function_parameters) [28090 28110])
                ("smoothed_state_covariances" variable nil (reparse-symbol function_parameters) [28142 28168]))              ) nil [27973 29474])
            ("_em_transition_matrix" function (:arguments 
              ( ("transition_offsets" variable nil (reparse-symbol function_parameters) [29502 29520])
                ("smoothed_state_means" variable nil (reparse-symbol function_parameters) [29522 29542])
                ("smoothed_state_covariances" variable nil (reparse-symbol function_parameters) [29570 29596])
                ("pairwise_covariances" variable nil (reparse-symbol function_parameters) [29598 29618]))              ) nil [29476 30741])
            ("_em_transition_covariance" function (:arguments 
              ( ("transition_matrices" variable nil (reparse-symbol function_parameters) [30773 30792])
                ("transition_offsets" variable nil (reparse-symbol function_parameters) [30794 30812])
                ("smoothed_state_means" variable nil (reparse-symbol function_parameters) [30844 30864])
                ("smoothed_state_covariances" variable nil (reparse-symbol function_parameters) [30866 30892])
                ("pairwise_covariances" variable nil (reparse-symbol function_parameters) [30924 30944]))              ) nil [30743 32367])
            ("_em_initial_state_mean" function (:arguments 
              ( ("smoothed_state_means" variable nil (reparse-symbol function_parameters) [32396 32416]))              ) nil [32369 32708])
            ("_em_initial_state_covariance" function (:arguments 
              ( ("initial_state_mean" variable nil (reparse-symbol function_parameters) [32743 32761])
                ("smoothed_state_means" variable nil (reparse-symbol function_parameters) [32763 32783])
                ("smoothed_state_covariances" variable nil (reparse-symbol function_parameters) [32818 32844]))              ) nil [32710 33490])
            ("_em_transition_offset" function (:arguments 
              ( ("transition_matrices" variable nil (reparse-symbol function_parameters) [33518 33537])
                ("smoothed_state_means" variable nil (reparse-symbol function_parameters) [33539 33559]))              ) nil [33492 34363])
            ("_em_observation_offset" function (:arguments 
              ( ("observation_matrices" variable nil (reparse-symbol function_parameters) [34392 34412])
                ("smoothed_state_means" variable nil (reparse-symbol function_parameters) [34414 34434])
                ("observations" variable nil (reparse-symbol function_parameters) [34463 34475]))              ) nil [34365 35308])
            ("KalmanFilter" type
               (:documentation "Implements the Kalman Filter, Kalman Smoother, and EM algorithm.

    This class implements the Kalman Filter, Kalman Smoother, and EM Algorithm
    for a Linear Gaussian model specified by,

    .. math::

        x_{t+1}   &= A_{t} x_{t} + b_{t} + \\\\text{Normal}(0, Q_{t}) \\\\\\\\
        z_{t}     &= C_{t} x_{t} + d_{t} + \\\\text{Normal}(0, R_{t})

    The Kalman Filter is an algorithm designed to estimate
    :math:`P(x_t | z_{0:t})`.  As all state transitions and observations are
    linear with Gaussian distributed noise, these distributions can be
    represented exactly as Gaussian distributions with mean
    `filtered_state_means[t]` and covariances `filtered_state_covariances[t]`.

    Similarly, the Kalman Smoother is an algorithm designed to estimate
    :math:`P(x_t | z_{0:T-1})`.

    The EM algorithm aims to find for
    :math:`\\\\theta = (A, b, C, d, Q, R, \\\\mu_0, \\\\Sigma_0)`

    .. math::

        \\\\max_{\\\\theta} P(z_{0:T-1}; \\\\theta)

    If we define :math:`L(x_{0:T-1},\\\\theta) = \\\\log P(z_{0:T-1}, x_{0:T-1};
    \\\\theta)`, then the EM algorithm works by iteratively finding,

    .. math::

        P(x_{0:T-1} | z_{0:T-1}, \\\\theta_i)

    then by maximizing,

    .. math::

        \\\\theta_{i+1} = \\\\arg\\\\max_{\\\\theta}
            \\\\mathbb{E}_{x_{0:T-1}} [
                L(x_{0:T-1}, \\\\theta)| z_{0:T-1}, \\\\theta_i
            ]

    Parameters
    ----------
    transition_matrices : [n_timesteps-1, n_dim_state, n_dim_state] or \\
    [n_dim_state,n_dim_state] array-like
        Also known as :math:`A`.  state transition matrix between times t and
        t+1 for t in [0...n_timesteps-2]
    observation_matrices : [n_timesteps, n_dim_obs, n_dim_obs] or [n_dim_obs, \\
    n_dim_obs] array-like
        Also known as :math:`C`.  observation matrix for times
        [0...n_timesteps-1]
    transition_covariance : [n_dim_state, n_dim_state] array-like
        Also known as :math:`Q`.  state transition covariance matrix for times
        [0...n_timesteps-2]
    observation_covariance : [n_dim_obs, n_dim_obs] array-like
        Also known as :math:`R`.  observation covariance matrix for times
        [0...n_timesteps-1]
    transition_offsets : [n_timesteps-1, n_dim_state] or [n_dim_state] \\
    array-like
        Also known as :math:`b`.  state offsets for times [0...n_timesteps-2]
    observation_offsets : [n_timesteps, n_dim_obs] or [n_dim_obs] array-like
        Also known as :math:`d`.  observation offset for times
        [0...n_timesteps-1]
    initial_state_mean : [n_dim_state] array-like
        Also known as :math:`\\\\mu_0`. mean of initial state distribution
    initial_state_covariance : [n_dim_state, n_dim_state] array-like
        Also known as :math:`\\\\Sigma_0`.  covariance of initial state
        distribution
    random_state : optional, numpy random state
        random number generator used in sampling
    em_vars : optional, subset of ['transition_matrices', \\
    'observation_matrices', 'transition_offsets', 'observation_offsets', \\
    'transition_covariance', 'observation_covariance', 'initial_state_mean', \\
    'initial_state_covariance'] or 'all'
        if `em_vars` is an iterable of strings only variables in `em_vars`
        will be estimated using EM.  if `em_vars` == 'all', then all
        variables will be estimated.
    n_dim_state: optional, integer
        the dimensionality of the state space. Only meaningful when you do not
        specify initial values for `transition_matrices`, `transition_offsets`,
        `transition_covariance`, `initial_state_mean`, or
        `initial_state_covariance`.
    n_dim_obs: optional, integer
        the dimensionality of the observation space. Only meaningful when you
        do not specify initial values for `observation_matrices`,
        `observation_offsets`, or `observation_covariance`.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize Kalman Filter\"\"\"" code nil (reparse-symbol indented_block_body) [39697 39727])
                            ("n_dim_state" variable nil (reparse-symbol indented_block_body) [39777 40152])
                            ("n_dim_obs" variable nil (reparse-symbol indented_block_body) [40161 40383])
                            ("self" variable nil (reparse-symbol indented_block_body) [40393 40439])
                            ("self" variable nil (reparse-symbol indented_block_body) [40448 40496])
                            ("self" variable nil (reparse-symbol indented_block_body) [40505 40555])
                            ("self" variable nil (reparse-symbol indented_block_body) [40564 40616])
                            ("self" variable nil (reparse-symbol indented_block_body) [40625 40669])
                            ("self" variable nil (reparse-symbol indented_block_body) [40678 40724])
                            ("self" variable nil (reparse-symbol indented_block_body) [40733 40777])
                            ("self" variable nil (reparse-symbol indented_block_body) [40786 40842])
                            ("self" variable nil (reparse-symbol indented_block_body) [40851 40883])
                            ("self" variable nil (reparse-symbol indented_block_body) [40892 40914])
                            ("self" variable nil (reparse-symbol indented_block_body) [40923 40953])
                            ("self" variable nil (reparse-symbol indented_block_body) [40962 40988]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39208 39212])
                            ("transition_matrices" variable nil (reparse-symbol function_parameters) [39214 39233])
                            ("observation_matrices" variable nil (reparse-symbol function_parameters) [39240 39260])
                            ("transition_covariance" variable nil (reparse-symbol function_parameters) [39279 39300])
                            ("observation_covariance" variable nil (reparse-symbol function_parameters) [39307 39329])
                            ("transition_offsets" variable nil (reparse-symbol function_parameters) [39348 39366])
                            ("observation_offsets" variable nil (reparse-symbol function_parameters) [39373 39392])
                            ("initial_state_mean" variable nil (reparse-symbol function_parameters) [39411 39429])
                            ("initial_state_covariance" variable nil (reparse-symbol function_parameters) [39436 39460])
                            ("random_state" variable nil (reparse-symbol function_parameters) [39479 39491])
                            ("em_vars" variable nil (reparse-symbol function_parameters) [39510 39517])
                            ("n_dim_state" variable nil (reparse-symbol function_parameters) [39654 39665])
                            ("n_dim_obs" variable nil (reparse-symbol function_parameters) [39672 39681]))                          
                        :documentation "Initialize Kalman Filter"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39195 40989])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41005 41009])
                            ("n_timesteps" variable nil (reparse-symbol function_parameters) [41011 41022])
                            ("initial_state" variable nil (reparse-symbol function_parameters) [41024 41037])
                            ("random_state" variable nil (reparse-symbol function_parameters) [41044 41056]))                          
                        :documentation "Sample a state sequence :math:`n_{\\\\text{timesteps}}` timesteps in
        length.

        Parameters
        ----------
        n_timesteps : int
            number of timesteps

        Returns
        -------
        states : [n_timesteps, n_dim_state] array
            hidden states corresponding to times [0...n_timesteps-1]
        observations : [n_timesteps, n_dim_obs] array
            observations corresponding to times [0...n_timesteps-1]
        ")
                        (reparse-symbol indented_block_body) [40994 43939])
                    ("filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43955 43959])
                            ("X" variable nil (reparse-symbol function_parameters) [43961 43962]))                          
                        :documentation "Apply the Kalman Filter

        Apply the Kalman Filter to estimate the hidden state at time :math:`t`
        for :math:`t = [0...n_{\\\\text{timesteps}}-1]` given observations up to
        and including time `t`.  Observations are assumed to correspond to
        times :math:`[0...n_{\\\\text{timesteps}}-1]`.  The output of this method
        corresponding to time :math:`n_{\\\\text{timesteps}}-1` can be used in
        :func:`KalmanFilter.filter_update` for online updating.

        Parameters
        ----------
        X : [n_timesteps, n_dim_obs] array-like
            observations corresponding to times [0...n_timesteps-1].  If `X` is
            a masked array and any of `X[t]` is masked, then `X[t]` will be
            treated as a missing observation.

        Returns
        -------
        filtered_state_means : [n_timesteps, n_dim_state]
            mean of hidden state distributions for times [0...n_timesteps-1]
            given observations up to and including the current time step
        filtered_state_covariances : [n_timesteps, n_dim_state, n_dim_state] \\
        array
            covariance matrix of hidden state distributions for times
            [0...n_timesteps-1] given observations up to and including the
            current time step
        ")
                        (reparse-symbol indented_block_body) [43944 46018])
                    ("filter_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46041 46045])
                            ("filtered_state_mean" variable nil (reparse-symbol function_parameters) [46047 46066])
                            ("filtered_state_covariance" variable nil (reparse-symbol function_parameters) [46068 46093])
                            ("observation" variable nil (reparse-symbol function_parameters) [46117 46128])
                            ("transition_matrix" variable nil (reparse-symbol function_parameters) [46135 46152])
                            ("transition_offset" variable nil (reparse-symbol function_parameters) [46181 46198])
                            ("transition_covariance" variable nil (reparse-symbol function_parameters) [46205 46226])
                            ("observation_matrix" variable nil (reparse-symbol function_parameters) [46255 46273])
                            ("observation_offset" variable nil (reparse-symbol function_parameters) [46280 46298])
                            ("observation_covariance" variable nil (reparse-symbol function_parameters) [46327 46349]))                          )
                        (reparse-symbol indented_block_body) [46023 51006])
                    ("smooth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51022 51026])
                            ("X" variable nil (reparse-symbol function_parameters) [51028 51029]))                          
                        :documentation "Apply the Kalman Smoother

        Apply the Kalman Smoother to estimate the hidden state at time
        :math:`t` for :math:`t = [0...n_{\\\\text{timesteps}}-1]` given all
        observations.  See :func:`_smooth` for more complex output

        Parameters
        ----------
        X : [n_timesteps, n_dim_obs] array-like
            observations corresponding to times [0...n_timesteps-1].  If `X` is
            a masked array and any of `X[t]` is masked, then `X[t]` will be
            treated as a missing observation.

        Returns
        -------
        smoothed_state_means : [n_timesteps, n_dim_state]
            mean of hidden state distributions for times [0...n_timesteps-1]
            given all observations
        smoothed_state_covariances : [n_timesteps, n_dim_state]
            covariances of hidden state distributions for times
            [0...n_timesteps-1] given all observations
        ")
                        (reparse-symbol indented_block_body) [51011 53034])
                    ("em" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53046 53050])
                            ("X" variable nil (reparse-symbol function_parameters) [53052 53053])
                            ("y" variable nil (reparse-symbol function_parameters) [53055 53056])
                            ("n_iter" variable nil (reparse-symbol function_parameters) [53063 53069])
                            ("em_vars" variable nil (reparse-symbol function_parameters) [53074 53081]))                          
                        :documentation "Apply the EM algorithm

        Apply the EM algorithm to estimate all parameters specified by
        `em_vars`.  Note that all variables estimated are assumed to be
        constant for all time.  See :func:`_em` for details.

        Parameters
        ----------
        X : [n_timesteps, n_dim_obs] array-like
            observations corresponding to times [0...n_timesteps-1].  If `X` is
            a masked array and any of `X[t]`'s components is masked, then
            `X[t]` will be treated as a missing observation.
        n_iter : int, optional
            number of EM iterations to perform
        em_vars : iterable of strings or 'all'
            variables to perform EM over.  Any variable not appearing here is
            left untouched.
        ")
                        (reparse-symbol indented_block_body) [53039 57190])
                    ("loglikelihood" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57213 57217])
                            ("X" variable nil (reparse-symbol function_parameters) [57219 57220]))                          
                        :documentation "Calculate the log likelihood of all observations

        Parameters
        ----------
        X : [n_timesteps, n_dim_obs] array
            observations for time steps [0...n_timesteps-1]

        Returns
        -------
        likelihood : float
            likelihood of all observations
        ")
                        (reparse-symbol indented_block_body) [57195 58646])
                    ("_initialize_parameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58678 58682]))                          
                        :documentation "Retrieve parameters if they exist, else replace with defaults")
                        (reparse-symbol indented_block_body) [58651 60631])
                    ("_parse_observations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60660 60664])
                            ("obs" variable nil (reparse-symbol function_parameters) [60666 60669]))                          
                        :documentation "Safely convert observations to their expected format")
                        (reparse-symbol indented_block_body) [60636 60869]))                  
                :type "class")
                nil [35310 60869]))          
      :file "standard.py"
      :pointmax 60869
      :fsize 60868
      :lastmodtime '(21850 63014 0 0)
      :unmatched-syntax '((FROM 301 . 305) (PERIOD 306 . 307)))
    (semanticdb-table "utils.py"
      :major-mode 'python-mode
      :tags 
        '( ("'''
Utility functions taken from scikit-learn
'''" code nil nil [1614 1663])
            ("inspect" include nil nil [1665 1679])
            ("itertools" include nil nil [1680 1696])
            ("numpy" include nil nil [1698 1716])
            ("scipy" include nil nil [1717 1741])
            ("array1d" function
               (:documentation "Returns at least 1-d array with data from X"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [1756 1757])
                    ("dtype" variable nil (reparse-symbol function_parameters) [1759 1764])
                    ("order" variable nil (reparse-symbol function_parameters) [1771 1776]))                  )
                nil [1744 1904])
            ("array2d" function
               (:documentation "Returns at least 2-d array with data from X"
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [1918 1919])
                    ("dtype" variable nil (reparse-symbol function_parameters) [1921 1926])
                    ("order" variable nil (reparse-symbol function_parameters) [1933 1938]))                  )
                nil [1906 2066])
            ("log_multivariate_normal_density" function
               (:documentation "Log probability for full covariance matrices. "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [2104 2105])
                    ("means" variable nil (reparse-symbol function_parameters) [2107 2112])
                    ("covars" variable nil (reparse-symbol function_parameters) [2114 2120])
                    ("min_covar" variable nil (reparse-symbol function_parameters) [2122 2131]))                  )
                nil [2068 3214])
            ("check_random_state" function
               (:documentation "Turn seed into a np.random.RandomState instance

    If seed is None, return the RandomState singleton used by np.random.
    If seed is an int, return a new RandomState instance seeded with seed.
    If seed is already a RandomState instance, return it.
    Otherwise raise ValueError.
    "
                :arguments 
                  ( ("seed" variable nil (reparse-symbol function_parameters) [3239 3243]))                  )
                nil [3216 3909])
            ("Bunch" type
               (:documentation "Container object for datasets: dictionary-like object that exposes its
    keys as attributes."
                :superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("dict" code nil (reparse-symbol indented_block_body) [4078 4105])
                            ("self" variable nil (reparse-symbol indented_block_body) [4114 4134]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4053 4057])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4059 4067]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4040 4135]))                  
                :type "class")
                nil [3911 4135])
            ("get_params" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [4152 4155]))              ) nil [4137 4605])
            ("preprocess_arguments" function
               (:documentation "convert and collect arguments in order of priority

    Parameters
    ----------
    argsets : [{argname: argval}]
        a list of argument sets, each with lower levels of priority
    converters : {argname: function}
        conversion functions for each argument

    Returns
    -------
    result : {argname: argval}
        processed arguments
    "
                :arguments 
                  ( ("argsets" variable nil (reparse-symbol function_parameters) [4632 4639])
                    ("converters" variable nil (reparse-symbol function_parameters) [4641 4651]))                  )
                nil [4607 5837]))          
      :file "utils.py"
      :pointmax 5837
      :fsize 5836
      :lastmodtime '(21850 63014 0 0)
      :unmatched-syntax nil))
  :file "!sandbox!pyvirtenv!pyvi3!lib!python3.4!site-packages!pykalman!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
