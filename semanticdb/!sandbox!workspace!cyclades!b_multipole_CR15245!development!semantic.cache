;; Object development/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "development/"
  :tables
  (list
    (semanticdb-table "Makefile"
      :major-mode 'makefile-gmake-mode
      :tags 
        '( ("AWK" variable (:default-value ("/usr/bin/awk")) nil [1007 1039])
            ("CCACHE" variable (:default-value ("/usr/bin/ccache")) nil [1039 1074])
            ("CP" variable (:default-value ("/bin/cp")) nil [1074 1101])
            ("CHMOD" variable (:default-value ("/bin/chmod")) nil [1101 1131])
            ("HEAD" variable (:default-value ("/usr/bin/head")) nil [1131 1164])
            ("LN" variable (:default-value ("/bin/ln")) nil [1164 1191])
            ("MKDIR" variable (:default-value ("/bin/mkdir" "-p")) nil [1191 1224])
            ("MV" variable (:default-value ("/bin/mv")) nil [1224 1251])
            ("RCC" variable (:default-value ("/usr/bin/rcc")) nil [1251 1283])
            ("RM" variable (:default-value ("/bin/rm" "-f")) nil [1283 1313])
            ("RPM" variable (:default-value ("/bin/rpm")) nil [1313 1341])
            ("RPMBUILD" variable (:default-value ("/usr/bin/rpmbuild")) nil [1341 1378])
            ("RPMDEV_CHECKSIG" variable (:default-value ("/usr/bin/rpmdev-checksig")) nil [1378 1422])
            ("RPMLINT" variable (:default-value ("/usr/bin/rpmlint")) nil [1422 1458])
            ("RSYNC" variable (:default-value ("/usr/bin/rsync")) nil [1458 1492])
            ("SED" variable (:default-value ("/bin/sed")) nil [1492 1520])
            ("SETSID" variable (:default-value ("/usr/bin/setsid")) nil [1520 1555])
            ("SHELL" variable (:default-value ("/bin/sh")) nil [1555 1582])
            ("TAR" variable (:default-value ("/bin/tar")) nil [1582 1610])
            ("TOUCH" variable (:default-value ("/bin/touch")) nil [1610 1640])
            ("TRUE" variable (:default-value ("/bin/true")) nil [1640 1669])
            ("ROOT_DIR" variable (:default-value ("$(CURDIR)")) nil [1670 1699])
            ("MK_DIR" variable (:default-value ("$(ROOT_DIR)/../makefiles")) nil [1699 1743])
            ("DISTCC" variable (:default-value ("1")) nil [1743 1764])
            ("CHECK_SYSTEM" variable (:default-value ("$(shell $(dir $(MAKEFILE_LIST))scripts/find-call-to-system.sh)")) nil [2193 2272])
            (".PHONY" function (:arguments ("missing_make_target" "help" "make_target_help_msg" "build_target_help_msg" "goal_help_msg" "hints_help_msg")) nil [2424 2529])
            (".PHONY" function (:arguments ("make_target_help_msg1" "make_target_help_msg2" "make_target_help_msg3" "make_target_help_msg4")) nil [2529 2625])
            ("missing_make_target" function (:arguments ("help")) nil [2901 2927])
            ("makefiles/Target.mk" include nil nil [2935 2963])
            ("help" function (:arguments ("make_target_help_msg" "build_target_help_msg" "goal_help_msg" "hints_help_msg")) nil [3194 3291])
            ("make_target_help_msg" function (:arguments ("make_target_help_msg1" "make_target_help_msg2" "make_target_help_msg3" "make_target_help_msg4")) nil [3316 3426])
            ("make_target_help_msg1" function nil nil [3702 3789])
            ("make_target_help_msg2" function nil nil [3811 4171])
            ("make_target_help_msg2" function nil nil [4216 4554])
            ("make_target_help_msg3" function nil nil [4583 4799])
            ("make_target_help_msg4" function nil nil [4832 4928])
            ("make_target_help_msg2" function nil nil [4952 5526])
            ("build_target_help_msg" function nil nil [5668 5913])
            ("goal_help_msg" function nil nil [6038 6259])
            ("hints_help_msg" function nil nil [6325 6632])
            ("$(MK_DIR)/Directories.mk" include nil nil [6876 6909])
            (".SECONDEXPANSION" function nil nil [7065 7083])
            (".PRECIOUS" function (:arguments ("%/.dir")) nil [7083 7101])
            ("%/.dir" function nil nil [7102 7284])
            (".PHONY" function (:arguments ("tmp_dirs")) nil [7285 7302])
            ("tmp_dirs" function (:arguments ("$(TMP_DIR)/.dir" "$(LOG_DIR)/.dir" "$(BIN_DIR)/.dir")) nil [7302 7360])
            (".PHONY" function (:arguments ("all")) nil [7612 7624])
            ("all" function (:arguments ("tmp_dirs" "verify_cov_path" "create_cov_file" "$(PROJECT_PREFIX)_libraries" "$(PROJECT_PREFIX)_binaries" "$(PROJECT_PREFIX)_install_shaders")) nil [7652 7787])
            ("all" function (:arguments ("tmp_dirs" "$(PROJECT_PREFIX)_libraries" "$(PROJECT_PREFIX)_binaries" "$(PROJECT_PREFIX)_install_shaders")) nil [7792 7895])
            (".PHONY" function (:arguments ("shaders")) nil [7902 7918])
            ("shaders" function (:arguments ("$(PROJECT_PREFIX)_shaders")) nil [7918 7953])
            (".PHONY" function (:arguments ("all" "run")) nil [7997 8013])
            ("all" function (:arguments ("tmp_dirs" "verify_cov_path" "create_cov_file" "$(PROJECT_PREFIX)_libraries" "$(PROJECT_PREFIX)_binaries" "$(PROJECT_PREFIX)_install_shaders" "$(PROJECT_PREFIX)_install_resources" "$(PROJECT_PREFIX)_unittests_scripts")) nil [8041 8255])
            ("all" function (:arguments ("tmp_dirs" "$(PROJECT_PREFIX)_libraries" "$(PROJECT_PREFIX)_binaries" "$(PROJECT_PREFIX)_install_shaders" "$(PROJECT_PREFIX)_install_resources" "$(PROJECT_PREFIX)_unittests_scripts")) nil [8260 8442])
            (".PHONY" function (:arguments ("shaders")) nil [8449 8465])
            ("shaders" function (:arguments ("$(PROJECT_PREFIX)_shaders")) nil [8465 8500])
            ("run" function (:arguments ("$(PROJECT_PREFIX)_run_tests")) nil [8501 8534])
            (".PHONY" function (:arguments ("cov")) nil [8563 8575])
            ("cov" function (:arguments ("code_coverage")) nil [8575 8594])
            ("CC" variable (:default-value ("gcc")) nil [8905 8916])
            ("CXX" variable (:default-value ("g++")) nil [8916 8927])
            ("CXX_VERSION" variable (:default-value ("$(shell $(CXX) --version | $(HEAD) -1 | $(AWK) '{print $$3}')")) nil [8928 9005])
            ("COMMON_FLAGS" variable (:default-value ("-march=prescott" "-mtune=prescott" "-msse" "-msse2" "-msse3" "-mfpmath=sse" "-pipe" "-D_FILE_OFFSET_BITS=64")) nil [9647 9757])
            ("QT_CORE_S_FLAGS" variable (:default-value ("-I/usr/include/QtCore" "-DQT_QT3SUPPORT_LIB" "-DQT3_SUPPORT" "-DQT_GUI_LIB" "-DQT_CORE_LIB")) nil [10105 10246])
            ("QT_GUI_S_FLAGS" variable (:default-value ("-I/usr/include/QtGui" "-DQT_QT3SUPPORT_LIB" "-DQT3_SUPPORT" "-DQT_GUI_LIB" "-DQT_CORE_LIB")) nil [10247 10384])
            ("QT_SQL_S_FLAGS" variable (:default-value ("-I/usr/include/QtSql" "-DQT_QT3SUPPORT_LIB" "-DQT3_SUPPORT" "-DQT_GUI_LIB" "-DQT_CORE_LIB")) nil [10385 10522])
            ("QT_XML_S_FLAGS" variable (:default-value ("-I/usr/include/QtXml" "-DQT_QT3SUPPORT_LIB" "-DQT3_SUPPORT" "-DQT_GUI_LIB" "-DQT_CORE_LIB")) nil [10523 10660])
            ("QT_DBUS_S_FLAGS" variable (:default-value ("-I/usr/include/QtDBus" "-DQT_QT3SUPPORT_LIB" "-DQT3_SUPPORT" "-DQT_GUI_LIB" "-DQT_CORE_LIB")) nil [10678 10819])
            ("QT_OPENGL_S_FLAGS" variable (:default-value ("$(QT_CORE_S_FLAGS)" "$(QT_GUI_S_FLAGS)" "-I/usr/include/QtOpenGL" "-DQT_NO_DEBUG" "-DQT_OPENGL_LIB" "-DQT_SHARED")) nil [10879 11046])
            ("QT_PHONON_S_FLAGS" variable (:default-value ("$(QT_CORE_S_FLAGS)" "$(QT_GUI_S_FLAGS)" "-I/usr/include/phonon" "-I/usr/include/phonon_compat" "-DQT_PHONON_LIB")) nil [11105 11273])
            ("QT_S_FLAGS" variable (:default-value ("$(QT_CORE_S_FLAGS)" "$(QT_GUI_S_FLAGS)" "$(QT_XML_S_FLAGS)")) nil [11274 11342])
            ("SDL_S_FLAGS" variable (:default-value ("-I/usr/include/SDL/")) nil [11343 11377])
            ("QT_CORE_LD_FLAGS" variable (:default-value ("-lQtCore")) nil [11379 11410])
            ("QT_GUI_LD_FLAGS" variable (:default-value ("-L/usr/X11R6/lib" "-lX11" "-lQtGui")) nil [11411 11509])
            ("QT_SQL_LD_FLAGS" variable (:default-value ("-lQtSql")) nil [11510 11539])
            ("QT_XML_LD_FLAGS" variable (:default-value ("-lQtXml")) nil [11540 11569])
            ("QT_DBUS_LD_FLAGS" variable (:default-value ("-lQtDBus")) nil [11570 11600])
            ("QT_LD_FLAGS" variable (:default-value ("$(QT_CORE_LD_FLAGS)" "$(QT_GUI_LD_FLAGS)" "$(QT_XML_LD_FLAGS)")) nil [11601 11676])
            ("QT_OPENGL_LD_FLAGS" variable (:default-value ("$(QT_CORE_LD_FLAGS)" "$(QT_GUI_LD_FLAGS)" "-lQtOpenGL" "-lGLU" "-lGL")) nil [11731 11813])
            ("QT_PHONON_LD_FLAGS" variable (:default-value ("$(QT_CORE_LD_FLAGS)" "$(QT_GUI_LD_FLAGS)" "-lphonon")) nil [11868 11937])
            ("GMOCK_LD_FLAGS" variable (:default-value ("/opt/gmock/lib/libgmock.a" "/opt/gmock/lib/libgtest.a" "-pthread")) nil [11938 12016])
            ("CGOS_LD_FLAGS" variable (:default-value ("-lcgos")) nil [12017 12040])
            ("SDL_LD_FLAGS" variable (:default-value ("-lSDL" "-lSDL_mixer")) nil [12041 12074])
            ("XTST_LD_FLAGS" variable (:default-value ("-lXtst")) nil [12075 12098])
            ("ODSI_LD_FLAGS" variable nil nil [12146 12162])
            ("INTEL_IPP_LD_FLAGS" variable nil nil [12162 12183])
            ("$(MK_DIR)/Rules.mk" include nil nil [12421 12448])
            ("$(MK_DIR)/Functions.mk" include nil nil [12714 12745])
            ("$(MK_DIR)/Pkg-config.mk" include nil nil [12998 13030])
            ("$(MK_DIR)/Shaders.mk" include nil nil [13283 13312])
            ("PACKAGEKIT_VERSION_IN_HEX" variable (:default-value ("$(call RPM_VERSION_IN_HEX,PackageKit-qt)")) nil [13557 13627])
            ("COMMON_FLAGS" variable (:default-value ("-DPACKAGEKIT_VERSION=$(PACKAGEKIT_VERSION_IN_HEX)")) nil [13627 13693])
            ("BOOST_VERSION_IN_DEC" variable (:default-value ("$(call RPM_VERSION_IN_DEC,boost)")) nil [13694 13751])
            ("HAS_BOOST_SYSTEM" variable (:default-value ("$(shell expr 13500 \\<= $(BOOST_VERSION_IN_DEC))")) nil [13875 13943])
            ("SRC_DIRS" variable (:default-value ("$(SRC_DIRS_C)" "$(SRC_DIRS_CPP)")) nil [14627 14668])
            ("SRC_DIRS_TEST" variable (:default-value ("$(SRC_DIRS_C_TEST)" "$(SRC_DIRS_CPP_TEST)")) nil [14668 14724])
            ("STLFILT" variable (:default-value ("$(TOOLS_DIR)/STLFilt/gfilt")) nil [14984 15020])
            ("STLFILT_OPTIONS" variable (:default-value ("-banner:N" "-cand:L")) nil [15020 15144])
            ("CUNIT_LIB" variable (:default-value ("$(TOOLS_DIR)/cunit/lib/libcunit-$(CROSS_COMPILE)gcc.a")) nil [15961 16027])
            ("comma" variable (:default-value (",")) nil [16274 16284])
            ("empty" variable nil nil [16284 16292])
            ("space" variable (:default-value ("$(empty)" "$(empty)")) nil [16292 16318])
            ("CODE_COV_SELECT" variable (:default-value ("${strip $(SRC_DIRS)}")) nil [16319 16359])
            ("CODE_COV_SELECT" variable (:default-value ("${addprefix !, ${strip $(SRC_DIRS_TEST)}}")) nil [16359 16420])
            ("COVFILE" variable (:default-value ("$(CURDIR)/../_log/test.cov")) nil [16421 16456])
            ("CGC" variable (:default-value ("cgc")) nil [17408 17418])
            ("CGFLAGS" variable (:default-value ("-profile" "arbfp1" "-strict" "-O3" "-q")) nil [17418 17459])
            ("CC" variable (:default-value ("$(CCACHE)" "$(CODE_COVERAGE)" "$(CC_PATH)")) nil [17692 17739])
            ("CC_DEP" variable (:default-value ("$(CCACHE)" "$(CC)")) nil [17739 17764])
            ("LD" variable (:default-value ("$(LD_PATH)")) nil [17764 17784])
            ("COMMON_FLAGS" variable (:default-value ("-Wall" "-Wextra" "-Werror" "-I$(SRC_DIR)" "-pedantic-errors" "$(TEST_FLAGS)")) nil [18256 18338])
            ("CFLAGS" variable (:default-value ("$(COMMON_FLAGS)" "-std=c99")) nil [18338 18379])
            ("CC_EXTRA_WARNINGS" variable (:default-value ("-Woverloaded-virtual")) nil [18380 18423])
            ("CC_EXTRA_WARNINGS" variable (:default-value ("-Wsign-promo")) nil [18423 18458])
            ("CC_EXTRA_WARNINGS" variable (:default-value ("-Wnon-virtual-dtor")) nil [18458 18499])
            ("CC_EXTRA_WARNINGS" variable (:default-value ("-Winit-self")) nil [18499 18533])
            ("CC_IGNORE_WARNINGS" variable (:default-value ("-Wno-variadic-macros")) nil [18773 18816])
            ("CC_IGNORE_WARNINGS" variable (:default-value ("-Wno-deprecated")) nil [18816 18854])
            ("CCFLAGS" variable (:default-value ("$(COMMON_FLAGS)" "-std=c++0x" "-fexceptions" "-fident" "$(CC_EXTRA_WARNINGS)" "$(CC_IGNORE_WARNINGS)")) nil [18855 18993])
            ("CLDFLAGS" variable (:default-value ("$(LDFLAGS)" "-L$(LIB_DIR)" "-Wl,-rpath-link,$(LIB_DIR)" "-Wl,-rpath,$(RELEASE_LIB_DIR)")) nil [19013 19164])
            ("CLDFLAGS" variable (:default-value ("$(LDFLAGS)" "-L$(LIB_DIR)" "-Wl,-rpath-link,$(LIB_DIR)" "-Wl,-rpath,$(LIB_DIR)" "-Wl,-rpath,$(RELEASE_LIB_DIR)")) nil [19169 19360])
            ("CXXLDFLAGS" variable (:default-value ("$(CLDFLAGS)" "-lboost_regex")) nil [19366 19408])
            ("$(PROJECT_PREFIX)" function (:arguments ("$($(PROJECT_PREFIX_UP)_LIBRARIES)" "$($(PROJECT_PREFIX_UP)_SQUISH_WRAPPER_LIBRARIES)")) nil [19660 19772])
            ("$(PROJECT_PREFIX)" function (:arguments ("${addprefix $(BIN_DIR)/, $(BINARIES)}")) nil [19772 19838])
            ("$(PROJECT_PREFIX)" function (:arguments ("$($(PROJECT_PREFIX_UP)_LIBRARIES)" "$($(PROJECT_PREFIX_UP)_SQUISH_WRAPPER_LIBRARIES)")) nil [19865 19977])
            ("$(PROJECT_PREFIX)" function (:arguments ("$(BINARIES_TEST)")) nil [19977 20022])
            ("$(PROJECT_PREFIX)" function (:arguments ("all")) nil [20023 20113])
            ("$(PROJECT_PREFIX)" function (:arguments ("$(SCRIPTS_NEEDED_FOR_UNITTESTS)")) nil [20127 20196])
            ("COVC_IN_PATH" variable (:default-value ("$(shell which covc &> /dev/null || echo NOT_FOUND)")) nil [21442 21509])
            ("verify_cov_path" function nil nil [21544 21561])
            ("verify_cov_path" function nil nil [21568 21633])
            ("COVERAGE_MOCK_FILTER" variable (:default-value ("\"!../code/*/mock/*\"")) nil [21882 21925])
            ("code_coverage" function nil nil [21926 22819])
            ("$(SQUISHIDL_TOOL)" function (:arguments ("$(BUILD_TOOL)")) nil [23106 23222])
            ("$(BUILD_TOOL)" function nil nil [23258 23776])
            ("TMP_COV_DIR" variable (:default-value ("$(shell mktemp -d /tmp/cov_src_XXXXXX)")) nil [24031 24085])
            ("TMP_COV_SRC" variable (:default-value ("$(TMP_COV_DIR)/a.cpp")) nil [24085 24121])
            ("TMP_COV_OBJ" variable (:default-value ("$(TMP_COV_DIR)/a.o")) nil [24121 24155])
            ("create_cov_file" function nil nil [24156 24271])
            ("create_cov_file" function nil nil [24278 24295])
            (".PHONY" function (:arguments ("ezcc_install_shaders" "ezcc_install_resources")) nil [24529 24581]))          
      :file "Makefile"
      :pointmax 24582
      :fsize 24581
      :lastmodtime '(21151 20520 206832 508000)
      :unmatched-syntax '((symbol 21175 . 21188) (semantic-list 21156 . 21175) (punctuation 21155 . 21156) (symbol 21153 . 21155) (punctuation 21151 . 21152) (punctuation 21150 . 21151) (symbol 21137 . 21149) (bol 21135 . 21135) (symbol 20846 . 20864) (semantic-list 20827 . 20846) (punctuation 20826 . 20827) (symbol 20824 . 20826) (punctuation 20822 . 20823) (punctuation 20821 . 20822) (symbol 20810 . 20820) (bol 20808 . 20808) (symbol 20501 . 20525) (semantic-list 20482 . 20501) (punctuation 20481 . 20482) (symbol 20479 . 20481) (punctuation 20477 . 20478) (punctuation 20476 . 20477) (symbol 20465 . 20475) (bol 20463 . 20463) (semantic-list 17395 . 17400) (punctuation 17394 . 17395) (semantic-list 17385 . 17393) (punctuation 17384 . 17385) (punctuation 17382 . 17383) (symbol 17373 . 17381) (bol 17371 . 17371) (semantic-list 17360 . 17370) (punctuation 17359 . 17360) (semantic-list 17343 . 17358) (punctuation 17342 . 17343) (semantic-list 17333 . 17341) (punctuation 17332 . 17333) (punctuation 17330 . 17331) (symbol 17325 . 17329) (bol 17323 . 17323) (semantic-list 17300 . 17317) (punctuation 17299 . 17300) (string 17280 . 17298) (punctuation 17279 . 17280) (symbol 17271 . 17279) (semantic-list 17261 . 17270) (punctuation 17260 . 17261) (punctuation 17258 . 17259) (symbol 17249 . 17257) (bol 17247 . 17247) (semantic-list 17229 . 17246) (punctuation 17228 . 17229) (string 17187 . 17227) (punctuation 17186 . 17187) (symbol 17178 . 17186) (semantic-list 17168 . 17177) (punctuation 17167 . 17168) (punctuation 17165 . 17166) (symbol 17160 . 17164) (bol 17158 . 17158) (symbol 17133 . 17135) (semantic-list 17118 . 17133) (punctuation 17117 . 17118) (punctuation 17115 . 17116) (symbol 17106 . 17113) (bol 17104 . 17104) (semantic-list 17094 . 17098) (punctuation 17093 . 17094) (punctuation 17091 . 17092) (symbol 17082 . 17089) (bol 17080 . 17080) (semantic-list 17058 . 17063) (punctuation 17057 . 17058) (semantic-list 17042 . 17057) (punctuation 17041 . 17042) (punctuation 17039 . 17040) (symbol 17030 . 17038) (bol 17028 . 17028) (semantic-list 17017 . 17022) (punctuation 17016 . 17017) (punctuation 17014 . 17015) (symbol 17005 . 17013) (bol 17003 . 17003) (semantic-list 16981 . 16985) (punctuation 16980 . 16981) (semantic-list 16965 . 16980) (punctuation 16964 . 16965) (punctuation 16962 . 16963) (symbol 16953 . 16960) (bol 16951 . 16951) (semantic-list 16941 . 16945) (punctuation 16940 . 16941) (punctuation 16938 . 16939) (symbol 16929 . 16936) (bol 16927 . 16927) (punctuation 16666 . 16667) (symbol 16652 . 16665) (bol 16650 . 16650) (symbol 16647 . 16649) (punctuation 16645 . 16646) (symbol 16631 . 16644) (bol 16629 . 16629) (semantic-list 16570 . 16623) (punctuation 16569 . 16570) (symbol 16560 . 16568) (symbol 16557 . 16559) (semantic-list 16547 . 16556) (punctuation 16546 . 16547) (symbol 16544 . 16546) (symbol 16535 . 16543) (semantic-list 16528 . 16534) (punctuation 16527 . 16528) (punctuation 16525 . 16526) (symbol 16511 . 16524) (bol 16509 . 16509) (symbol 16506 . 16508) (punctuation 16504 . 16505) (symbol 16490 . 16503) (bol 16488 . 16488) (punctuation 16486 . 16487) (symbol 16480 . 16486) (bol 16478 . 16478) (bol 15144 . 15144) (symbol 14614 . 14625) (semantic-list 14605 . 14614) (punctuation 14604 . 14605) (symbol 14595 . 14603) (bol 14595 . 14595) (symbol 14262 . 14290) (semantic-list 14253 . 14262) (punctuation 14252 . 14253) (symbol 14243 . 14251) (bol 14243 . 14243) (symbol 14224 . 14242) (semantic-list 14215 . 14224) (punctuation 14214 . 14215) (symbol 14205 . 14213) (bol 14205 . 14205) (bol 10660 . 10660) (symbol 10077 . 10097) (punctuation 10075 . 10076) (punctuation 10074 . 10075) (symbol 10061 . 10073) (bol 10059 . 10059) (ENDIF 9635 . 9640) (bol 9633 . 9633) (symbol 9611 . 9632) (punctuation 9609 . 9610) (symbol 9583 . 9608) (bol 9579 . 9579) (semantic-list 9556 . 9578) (IFEQ 9551 . 9555) (bol 9549 . 9549) (ENDIF 9543 . 9548) (bol 9541 . 9541) (symbol 9537 . 9540) (punctuation 9535 . 9536) (punctuation 9534 . 9535) (symbol 9521 . 9533) (bol 9517 . 9517) (ELSE 9512 . 9516) (bol 9510 . 9510) (symbol 9506 . 9509) (symbol 9503 . 9505) (punctuation 9501 . 9502) (punctuation 9500 . 9501) (symbol 9487 . 9499) (bol 9483 . 9483) (semantic-list 9463 . 9482) (IFEQ 9458 . 9462) (bol 9456 . 9456) (symbol 9444 . 9450) (punctuation 9442 . 9443) (symbol 9427 . 9440) (bol 9425 . 9425) (symbol 9405 . 9424) (punctuation 9403 . 9404) (punctuation 9402 . 9403) (symbol 9388 . 9395) (bol 9386 . 9386) (symbol 9366 . 9385) (symbol 9332 . 9365) (symbol 9320 . 9331) (symbol 9310 . 9319) (symbol 9306 . 9309) (symbol 9300 . 9305) (symbol 9297 . 9299) (punctuation 9295 . 9296) (punctuation 9294 . 9295) (symbol 9280 . 9292) (bol 9278 . 9278) (ENDIF 8650 . 8655) (bol 8650 . 8650) (ENDIF 8626 . 8631) (bol 8626 . 8626) (ENDIF 8594 . 8599) (bol 8594 . 8594) (ELSE 7954 . 7958) (bol 7954 . 7954) (symbol 7058 . 7063) (bol 7058 . 7058) (semantic-list 7015 . 7057) (punctuation 7014 . 7015) (bol 7012 . 7012) (symbol 6994 . 7011) (symbol 6987 . 6993) (bol 6987 . 6987) (symbol 6980 . 6985) (bol 6980 . 6980) (semantic-list 6939 . 6979) (punctuation 6938 . 6939) (bol 6936 . 6936) (symbol 6917 . 6935) (symbol 6910 . 6916) (bol 6910 . 6910) (ENDIF 6283 . 6288) (bol 6283 . 6283) (ENDIF 6260 . 6265) (bol 6260 . 6260) (ENDIF 5947 . 5952) (bol 5947 . 5947) (ENDIF 5914 . 5919) (bol 5914 . 5914) (ENDIF 5551 . 5556) (bol 5551 . 5551) (ENDIF 5527 . 5532) (bol 5527 . 5527) (ELSE 4929 . 4933) (bol 4929 . 4929) (ENDIF 4800 . 4805) (bol 4800 . 4800) (ELSE 4172 . 4176) (bol 4172 . 4172) (semantic-list 2350 . 2374) (punctuation 2349 . 2350) (bol 2349 . 2349) (symbol 1821 . 1825) (punctuation 1819 . 1820) (symbol 1801 . 1818) (symbol 1794 . 1800) (bol 1794 . 1794) (symbol 1789 . 1793) (punctuation 1787 . 1788) (symbol 1772 . 1786) (symbol 1765 . 1771) (bol 1765 . 1765))))
  :file "!sandbox!workspace!cyclades!b_multipole_CR15245!development!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
