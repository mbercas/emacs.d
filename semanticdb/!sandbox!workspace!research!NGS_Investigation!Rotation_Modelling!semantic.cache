;; Object Rotation_Modelling/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "Rotation_Modelling/"
  :tables
  (list
    (semanticdb-table "FieldEstimator.py"
      :major-mode 'python-mode
      :tags 
        '( ("scipy.optimize" include nil nil [1 35])
            ("numpy" include nil nil [36 118])
            ("numpy.linalg" include nil nil [119 150])
            ("settings" include nil nil [152 167])
            ("Quaternion" include nil nil [168 205])
            ("FieldEstimator" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The field estimator class.

        @param sensors [in] the sensor positions in the coordinate system
                            of the probe. This structure has independent
                            coordinates for the sX, sY, sY sensors in
                            each chip.
        @param lut     [in] field lookup table for the p&z components in 
                            cylindrical coordinates and in the needle 
                            coordinate system. p is perpendicular to the
                            needle,  z goes along the axis of
                            the needle and the tip is at the z=0 point.
        \"\"\"" code nil (reparse-symbol indented_block_body) [278 937])
                            ("self" variable nil (reparse-symbol indented_block_body) [947 969])
                            ("self" variable nil (reparse-symbol indented_block_body) [978 996]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [248 252])
                            ("sensors" variable nil (reparse-symbol function_parameters) [254 261])
                            ("lut" variable nil (reparse-symbol function_parameters) [263 266]))                          
                        :documentation "
        The field estimator class.

        @param sensors [in] the sensor positions in the coordinate system
                            of the probe. This structure has independent
                            coordinates for the sX, sY, sY sensors in
                            each chip.
        @param lut     [in] field lookup table for the p&z components in 
                            cylindrical coordinates and in the needle 
                            coordinate system. p is perpendicular to the
                            needle,  z goes along the axis of
                            the needle and the tip is at the z=0 point.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [234 997])
                    ("TranslateToNewBase" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1026 1030])
                            ("data" variable nil (reparse-symbol function_parameters) [1032 1036])
                            ("translation" variable nil (reparse-symbol function_parameters) [1038 1049])
                            ("rot" variable nil (reparse-symbol function_parameters) [1051 1054]))                          
                        :documentation "
        Transforms the array of (x,y,z) positions by applying a translation
        and a rotation passed as arguments.

        @param rot [in] the rotation definition, it can be either a rotatation
                        matrix or an arc-quaterion

        Returns an array of positions in the new coordinates base
        ")
                        (reparse-symbol indented_block_body) [1002 1580])
                    ("RotationMatrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1605 1609])
                            ("phi" variable nil (reparse-symbol function_parameters) [1611 1614])
                            ("theta" variable nil (reparse-symbol function_parameters) [1616 1621]))                          )
                        (reparse-symbol indented_block_body) [1585 2116])
                    ("GetCylindricalFieldInOrigin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2159 2163])
                            ("sXn" variable nil (reparse-symbol function_parameters) [2165 2168])
                            ("sYn" variable nil (reparse-symbol function_parameters) [2170 2173])
                            ("sZn" variable nil (reparse-symbol function_parameters) [2175 2178])
                            ("valid" variable nil (reparse-symbol function_parameters) [2180 2185]))                          
                        :documentation "
        @param sXn   [in]  field in the X axis for all the sensors
        @param sYn   [in]  field in the Y axis for all the sensors
        @param sZn   [in]  field in the Z axis for all the sensors

        @param valid [out] the sensors that are estimated within table limits
        ")
                        (reparse-symbol indented_block_body) [2126 4577])
                    ("GetFieldAngles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4602 4606])
                            ("tip" variable nil (reparse-symbol function_parameters) [4608 4611])
                            ("phi" variable nil (reparse-symbol function_parameters) [4613 4616])
                            ("theta" variable nil (reparse-symbol function_parameters) [4618 4623])
                            ("valid" variable nil (reparse-symbol function_parameters) [4625 4630]))                          
                        :documentation "
        Function to compare the measured B-field values to that 
        estimated by LUT at x,y,z
 
        Guesses from the nonlinear optimization are:
 
        @param tip   [in] Translation of the tip positions in the coordinate 
                          frame of the probe in cartesian coordinates (x,y,z)
        @param phi   [in] rotation of the probe around 'z' axis (radians)
        @param theta [in] rotation of the probe around 'y' axis (radians)

        @param valid [out] indicates if the field was found within the lookup
                           table limits

        return field
        ")
                        (reparse-symbol indented_block_body) [4582 6184])
                    ("GetFieldQuaternion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6215 6219])
                            ("tip" variable nil (reparse-symbol function_parameters) [6221 6224])
                            ("w" variable nil (reparse-symbol function_parameters) [6226 6227])
                            ("x" variable nil (reparse-symbol function_parameters) [6229 6230])
                            ("y" variable nil (reparse-symbol function_parameters) [6232 6233])
                            ("z" variable nil (reparse-symbol function_parameters) [6235 6236])
                            ("valid" variable nil (reparse-symbol function_parameters) [6238 6243]))                          
                        :documentation "
        Function to compare the measured B-field values to that 
        estimated by LUT at x,y,z
 
        Guesses from the nonlinear optimization are:
 
        @param tip   [in] Translation of the tip positions in the coordinate 
                          frame of the probe in cartesian coordinates (x,y,z)
        @param phi   [in] rotation of the probe around 'x' axis (radians)
        @param theta [in] rotation of the probe around 'y' axis (radians)
        @param w     [in] real part of the quaternion
        @param x     [in] i component of the imaginary part of the quaternion
        @param y     [in] j component of the imaginary part of the quaternion
        @param z     [in] k component of the imaginary part of the quaternion

        @param valid [out] indicates if the field was found within the lookup
                           table limits

        return field
        ")
                        (reparse-symbol indented_block_body) [6191 8298])
                    ("ResidualFunction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8324 8328])
                            ("params" variable nil (reparse-symbol function_parameters) [8330 8336])
                            ("sX" variable nil (reparse-symbol function_parameters) [8338 8340])
                            ("sY" variable nil (reparse-symbol function_parameters) [8342 8344])
                            ("sZ" variable nil (reparse-symbol function_parameters) [8346 8348])
                            ("valid" variable nil (reparse-symbol function_parameters) [8350 8355]))                          
                        :documentation "
        @param params [inout] on input contain the initial condition, on output
                              contains the estimation.

                              params can be two sets of params
                              1.- tip, phi, theta
                              2.- tip, directionVector

                              Selects the model depending on the parametrization

        @param sX,sY,sZ [in]  the values of gradient
        @param valid    [in]  the array of valid sensors

        @return the residual of the input versus the estimation.

        ")
                        (reparse-symbol indented_block_body) [8303 10815]))                  
                :type "class")
                nil [207 10815]))          
      :file "FieldEstimator.py"
      :pointmax 10839
      :fsize 10814
      :lastmodtime '(21869 29709 8629 557000)
      :unmatched-syntax nil)
    (semanticdb-table "settings.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 37])
            ("magnetization" variable nil nil [40 61])
            ("polesZOffset" variable nil nil [63 94])
            ("polesMagnetization" variable nil nil [95 274])
            ("createLUTs" variable nil nil [277 295])
            ("arraysSize" variable nil nil [328 344])
            ("tipX" variable nil nil [359 402])
            ("tipY" variable nil nil [403 447])
            ("tipZ" code nil nil [449 476])
            ("rotationAxis" variable nil nil [478 502])
            ("rotationAngle" variable nil nil [503 520])
            ("isRotationTurnAndBack" variable nil nil [536 565])
            ("dataAddNoise" variable nil nil [567 587])
            ("noiseLevel" variable nil nil [588 604])
            ("dataAddEarthField" variable nil nil [606 630])
            ("earthMagneticField" variable nil nil [631 667])
            ("isGradientMethod" variable nil nil [669 693])
            ("generateOptimistFunctionalTestDataFile" variable nil nil [695 741])
            ("setValidSensorsBasedOnThreshold" variable nil nil [790 829])
            ("setSupervisor" variable nil nil [830 851])
            ("useCalculatedField" variable nil nil [853 878])
            ("waitToTolerance" variable nil nil [879 902])
            ("tolerance" variable nil nil [903 918])
            ("kalmanTrackAngle" variable nil nil [998 1021])
            ("print_results" variable nil nil [1024 1044]))          
      :file "settings.py"
      :pointmax 1045
      :fsize 1044
      :lastmodtime '(21855 8770 597515 456000)
      :unmatched-syntax nil)
    (semanticdb-table "Quaternion.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 102])
            ("numpy.linalg" include nil nil [103 132])
            ("Quaternion" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [216 226])
                            ("self" variable nil (reparse-symbol indented_block_body) [235 245])
                            ("self" variable nil (reparse-symbol indented_block_body) [254 264])
                            ("self" variable nil (reparse-symbol indented_block_body) [273 283]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171 175])
                            ("w" variable nil (reparse-symbol function_parameters) [177 178])
                            ("x" variable nil (reparse-symbol function_parameters) [182 183])
                            ("y" variable nil (reparse-symbol function_parameters) [187 188])
                            ("z" variable nil (reparse-symbol function_parameters) [192 193]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [157 284])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [302 306])
                            ("other" variable nil (reparse-symbol function_parameters) [308 313]))                          
                        :documentation "
        Non conmutative quaternion multiplication, returns a quaternion
        with the result of the quaternion multiplication.
        ")
                        (reparse-symbol indented_block_body) [289 1033])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1053 1057])
                            ("other" variable nil (reparse-symbol function_parameters) [1059 1064]))                          
                        :documentation "
        Quaternion addition
        ")
                        (reparse-symbol indented_block_body) [1040 1302])
                    ("__truediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1324 1328])
                            ("scalar" variable nil (reparse-symbol function_parameters) [1330 1336]))                          
                        :documentation "
        Division operation

        @param a scalar value
        ")
                        (reparse-symbol indented_block_body) [1307 1608])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1636 1640]))                          )
                        (reparse-symbol indented_block_body) [1623 1736])
                    ("Conjugate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1756 1760]))                          
                        :documentation "
        Conjugates the current quaternion
        ")
                        (reparse-symbol indented_block_body) [1741 1905])
                    ("Inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1924 1928]))                          
                        :documentation "
        Inverses the current quaternion
        ")
                        (reparse-symbol indented_block_body) [1911 2046])
                    ("Normalize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2066 2070]))                          
                        :documentation "
        Normalizes the current quaternion.
        ")
                        (reparse-symbol indented_block_body) [2051 2259])
                    ("GetConjugate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2283 2287]))                          )
                        (reparse-symbol indented_block_body) [2265 2355])
                    ("GetInverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2376 2380]))                          
                        :documentation "
        Calculates the inverse of the quaternion
        ")
                        (reparse-symbol indented_block_body) [2360 2518])
                    ("GetNorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2536 2540]))                          
                        :documentation "
        Returns the norm of the quaternion
        ")
                        (reparse-symbol indented_block_body) [2523 2680])
                    ("RotationMatrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2714 2718]))                          
                        :documentation "
        Returns a 4x4 rotation matrix associated with the quaternion
        ")
                        (reparse-symbol indented_block_body) [2694 3383])
                    ("ConvertToEulerAngles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3414 3418]))                          
                        :documentation "
        Converts the quaternion to the Euler angles

        - roll   ( rotation over X-axis - theta )
        - pitch  ( rotation over Y-axis - phi   )
        - yaw    ( rotation over Z-axis - alpha )

        angle values are in radians
        
        ")
                        (reparse-symbol indented_block_body) [3388 4419])
                    ("FromEuler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4439 4443])
                            ("euler" variable nil (reparse-symbol function_parameters) [4445 4450]))                          )
                        (reparse-symbol indented_block_body) [4425 4859])
                    ("RotateVector" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4882 4886])
                            ("v" variable nil (reparse-symbol function_parameters) [4888 4889]))                          )
                        (reparse-symbol indented_block_body) [4864 5045])
                    ("InverseRotateVector" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5075 5079])
                            ("v" variable nil (reparse-symbol function_parameters) [5081 5082]))                          )
                        (reparse-symbol indented_block_body) [5050 5238]))                  
                :type "class")
                nil [134 5238])
            ("LocalRotation" function
               (:documentation "
    Creates a quatuernion with the local rotation.

    x,y,z unitary vector that specifies the axis around which 
          to perform the rotation.
    angle is the amount of rotation (in radians)
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [5267 5268])
                    ("y" variable nil (reparse-symbol function_parameters) [5270 5271])
                    ("z" variable nil (reparse-symbol function_parameters) [5273 5274])
                    ("angle" variable nil (reparse-symbol function_parameters) [5276 5281]))                  )
                nil [5248 5683])
            ("GetRotationTo" function
               (:documentation "
    Returns the arc quatertion to rotate the orig vector to the destination
    vector.

    if orig and dest are parallel but with opposite signs we will rotate 180
    degrees around the fallback axis

    https://bitbucket.org/sinbad/ogre/src/9db75e3ba05c/OgreMain/include/OgreVector3.h#cl-651

    "
                :arguments 
                  ( ("orig" variable nil (reparse-symbol function_parameters) [5713 5717])
                    ("dest" variable nil (reparse-symbol function_parameters) [5719 5723]))                  )
                nil [5694 6351])
            ("GetQuaternionArray" function
               (:documentation "
    Rotates the sensors positions to simulate a probe rotation

    @param x,y,z [in] unitary vector that specifies the axis around which 
                      to perform the rotation.
    @param angle [in] is the amount of rotation (in radians)

    @param size  [in] is the size of the vector

    "
                :arguments 
                  ( ("axis" variable nil (reparse-symbol function_parameters) [6378 6382])
                    ("angle" variable nil (reparse-symbol function_parameters) [6384 6389])
                    ("size" variable nil (reparse-symbol function_parameters) [6391 6395])
                    ("isRotationTurnAndBack" variable nil (reparse-symbol function_parameters) [6397 6418]))                  )
                nil [6355 7143]))          
      :file "Quaternion.py"
      :pointmax 7143
      :fsize 7142
      :lastmodtime '(21855 8770 596515 448000)
      :unmatched-syntax nil)
    (semanticdb-table "FieldEstimatorTest.py"
      :major-mode 'python-mode
      :tags 
        '( ("pylab" include nil nil [20 39])
            ("FieldEstimator" include nil nil [41 82])
            ("LookupTableGenerator" include nil nil [83 136])
            ("SensorDataGenerator" include nil nil [137 188])
            ("Multipole" include nil nil [189 220])
            ("ProbeDefinitions" include nil nil [221 265])
            ("Trayectory" include nil nil [266 299])
            ("copy" include nil nil [300 311])
            ("if" code nil nil [314 2660]))          
      :file "FieldEstimatorTest.py"
      :pointmax 2666
      :fsize 2665
      :lastmodtime '(21852 17804 788887 746000)
      :unmatched-syntax nil)
    (semanticdb-table "LookupTableGenerator.py"
      :file "LookupTableGenerator.py"
      :fsize 10393
      :lastmodtime '(21852 14297 413197 712000))
    (semanticdb-table "SensorDataGenerator.py"
      :file "SensorDataGenerator.py"
      :fsize 3927
      :lastmodtime '(21855 8770 598515 463000))
    (semanticdb-table "Multipole.py"
      :major-mode 'python-mode
      :tags 
        '( ("settings" include nil nil [19 34])
            ("numpy" include nil nil [36 108])
            ("numpy.linalg" include nil nil [109 138])
            ("DEFAULT_DISTANCE" variable nil nil [140 161])
            ("Multipole" type
               (:documentation "
    A class for defining an arbitrary multipole; the needle is modeled 
    along the z axis, the tip is at (0,0) and the poles are modeled
    as displaced from the tip
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [412 460])
                            ("self" variable nil (reparse-symbol indented_block_body) [469 513])
                            ("self" variable nil (reparse-symbol indented_block_body) [522 567])
                            ("self" variable nil (reparse-symbol indented_block_body) [577 601])
                            ("self" variable nil (reparse-symbol indented_block_body) [610 641])
                            ("self" variable nil (reparse-symbol indented_block_body) [650 681])
                            ("self" variable nil (reparse-symbol indented_block_body) [692 713])
                            ("self" variable nil (reparse-symbol indented_block_body) [722 743])
                            ("self" variable nil (reparse-symbol indented_block_body) [752 773])
                            ("self" variable nil (reparse-symbol indented_block_body) [782 803]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [384 388])
                            ("mag" variable nil (reparse-symbol function_parameters) [390 393]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [370 804])
                    ("GetLength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [824 828]))                          
                        :documentation "
        Returns the needle length
        ")
                        (reparse-symbol indented_block_body) [809 922])
                    ("GetEnd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [939 943]))                          
                        :documentation "
        Returns the coordinates for the end of the needle
        ")
                        (reparse-symbol indented_block_body) [927 1087])
                    ("GetSensorWithHighestField" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1127 1131])
                            ("sensorData" variable nil (reparse-symbol function_parameters) [1133 1143]))                          
                        :documentation "
        Returns the index of the sensor with the highest field reading.
        ")
                        (reparse-symbol indented_block_body) [1096 1723])
                    ("UnaryVectorInMaxSensor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1757 1761])
                            ("sensors" variable nil (reparse-symbol function_parameters) [1763 1770])
                            ("maxIndex" variable nil (reparse-symbol function_parameters) [1772 1780]))                          
                        :documentation "
        Retunrn the direction vector from the center of the probe to the sensor
        with the highest reading
        ")
                        (reparse-symbol indented_block_body) [1729 2032])
                    ("GetInitialRandomNeedleDirection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2084 2088])
                            ("sensors" variable nil (reparse-symbol function_parameters) [2090 2097])
                            ("sensorData" variable nil (reparse-symbol function_parameters) [2099 2109]))                          
                        :documentation "
        Given the direction vector creates returns the postion of 
        the tip and initial angles for a random needle.

        @param snesors    [in] the positions for all the sensors
        @param sensorData [in] the values of field for all the sensors
        @returns          [out] tupple containing tip and direction vector
        ")
                        (reparse-symbol indented_block_body) [2047 2771])
                    ("GetInitialRandomNeedleAngles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2810 2814])
                            ("sensors" variable nil (reparse-symbol function_parameters) [2816 2823])
                            ("sensorData" variable nil (reparse-symbol function_parameters) [2825 2835]))                          
                        :documentation "
        Given the direction vector creates returns the postion of 
        the tip and initial angles for a random needle.

        @param snesors    [in] the positions for all the sensors
        @param sensorData [in] the values of field for all the sensors
        @returns          [out] tupple containing tip, phi, theta
        ")
                        (reparse-symbol indented_block_body) [2776 3722])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3746 3750]))                          )
                        (reparse-symbol indented_block_body) [3733 4034]))                  
                :type "class")
                nil [163 4034]))          
      :file "Multipole.py"
      :pointmax 4034
      :fsize 4033
      :lastmodtime '(21852 14297 409197 685000)
      :unmatched-syntax nil)
    (semanticdb-table "ProbeDefinitions.py"
      :file "ProbeDefinitions.py"
      :fsize 2433
      :lastmodtime '(21852 14297 408197 678000))
    (semanticdb-table "Trayectory.py"
      :major-mode 'python-mode
      :tags 
        '( ("Quaternion" include nil nil [1 69])
            ("settings" include nil nil [70 85])
            ("numpy" include nil nil [87 152])
            ("numpy.linalg" include nil nil [153 182])
            ("Trayectory" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [244 262])
                            ("self" variable nil (reparse-symbol indented_block_body) [272 293])
                            ("self" variable nil (reparse-symbol indented_block_body) [302 323])
                            ("self" variable nil (reparse-symbol indented_block_body) [332 353])
                            ("self" variable nil (reparse-symbol indented_block_body) [362 383])
                            ("self" variable nil (reparse-symbol indented_block_body) [401 422]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [223 227]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [209 423])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [442 446]))                          )
                        (reparse-symbol indented_block_body) [429 473])
                    ("QuaternionCoeffs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [504 508])
                            ("phi" variable nil (reparse-symbol function_parameters) [510 513])
                            ("theta" variable nil (reparse-symbol function_parameters) [515 520]))                          )
                        (reparse-symbol indented_block_body) [482 807])
                    ("GetTrayectory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [831 835])
                            ("sz" variable nil (reparse-symbol function_parameters) [837 839]))                          )
                        (reparse-symbol indented_block_body) [812 2194]))                  
                :type "class")
                nil [186 2194]))          
      :file "Trayectory.py"
      :pointmax 2194
      :fsize 2193
      :lastmodtime '(21869 30540 749235 894000)
      :unmatched-syntax nil)
    (semanticdb-table "spike.py"
      :major-mode 'python-mode
      :tags 
        '( ("Quaternion" include nil nil [25 73])
            ("numpy" include nil nil [74 113])
            ("if" code nil nil [116 1199]))          
      :file "spike.py"
      :pointmax 1211
      :fsize 1210
      :lastmodtime '(21852 38066 300188 479000)
      :unmatched-syntax nil)
    (semanticdb-table "FieldData.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [20 79])
            ("CommonFunctions" include nil nil [81 117])
            ("FieldData" type
               (:documentation "
    A class to hold the sensor data with methods to read the data 
    from a file.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [280 290])
                            ("self" variable nil (reparse-symbol indented_block_body) [300 322])
                            ("self" variable nil (reparse-symbol indented_block_body) [331 353])
                            ("self" variable nil (reparse-symbol indented_block_body) [362 384])
                            ("self" variable nil (reparse-symbol indented_block_body) [394 418]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [255 259])
                            ("N" variable nil (reparse-symbol function_parameters) [261 262]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [241 419])
                    ("ReadFromFile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [442 446])
                            ("fn" variable nil (reparse-symbol function_parameters) [448 450]))                          
                        :documentation "
        Loads the field data from a a file (as generated from the system)
        ")
                        (reparse-symbol indented_block_body) [424 740])
                    ("SetAllSensorsValid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [770 774]))                          )
                        (reparse-symbol indented_block_body) [746 840])
                    ("SetValidBasedOnThreshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [879 883])
                            ("threshold" variable nil (reparse-symbol function_parameters) [885 894])
                            ("usegrad" variable nil (reparse-symbol function_parameters) [901 908]))                          
                        :documentation "
        Removes the sensor with the highest reading and all
        of those with a field value above the threshold

        @param theshold [in] the value of field above which sensors
                             are marked as invalid.
        @param usegrad  [in] when set to true uses the gradient for
                             the comparison, otherwise uses the 
                             field
        ")
                        (reparse-symbol indented_block_body) [849 2367])
                    ("WriteDataForFunctionalTest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2407 2411])
                            ("fn" variable nil (reparse-symbol function_parameters) [2413 2415]))                          )
                        (reparse-symbol indented_block_body) [2375 2957]))                  
                :type "class")
                nil [120 2957]))          
      :file "FieldData.py"
      :pointmax 2964
      :fsize 2963
      :lastmodtime '(21852 14297 411197 698000)
      :unmatched-syntax nil)
    (semanticdb-table "CommonFunctions.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 29])
            ("settings" include nil nil [30 45])
            ("copy" include nil nil [46 57])
            ("Field" function
               (:documentation "
    Calculates field for all sensors

    @param [in] mx the field in component X for all sensors
    @param [in] my the field in component Y for all sensors
    @param [in] mz the field in component Z for all sensors
    
    @return the field value for all sensors
    "
                :arguments 
                  ( ("mx" variable nil (reparse-symbol function_parameters) [77 79])
                    ("my" variable nil (reparse-symbol function_parameters) [81 83])
                    ("mz" variable nil (reparse-symbol function_parameters) [85 87]))                  )
                nil [66 414])
            ("Gradient" function
               (:documentation "
    Calculates the so-called gradient for the valid sensors

    @param [in] mx the field in component X for all sensors
    @param [in] my the field in component Y for all sensors
    @param [in] mz the field in component Z for all sensors
    @param [inout] valid a vector indicating which sensors have valid readings. Invalid
                readings are set to zero.
    @param [in] removeHighestField is set to True, then the gradient is re-calculated 
                ignoring the sensor with the highest gradient.
    "
                :arguments 
                  ( ("mx" variable nil (reparse-symbol function_parameters) [429 431])
                    ("my" variable nil (reparse-symbol function_parameters) [433 435])
                    ("mz" variable nil (reparse-symbol function_parameters) [437 439])
                    ("valid" variable nil (reparse-symbol function_parameters) [441 446])
                    ("removeHighestReading" variable nil (reparse-symbol function_parameters) [448 468]))                  )
                nil [415 1397])
            ("GetInitialValue" function (:arguments 
              ( ("mx" variable nil (reparse-symbol function_parameters) [1419 1421])
                ("my" variable nil (reparse-symbol function_parameters) [1423 1425])
                ("mz" variable nil (reparse-symbol function_parameters) [1427 1429])
                ("valid" variable nil (reparse-symbol function_parameters) [1431 1436])
                ("bEarth" variable nil (reparse-symbol function_parameters) [1438 1444]))              ) nil [1398 1791]))          
      :file "CommonFunctions.py"
      :pointmax 1796
      :fsize 1795
      :lastmodtime '(21852 14297 412197 705000)
      :unmatched-syntax nil)
    (semanticdb-table "run_model.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [24 61])
            ("LookupTableGenerator" include nil nil [63 116])
            ("Multipole" include nil nil [117 159])
            ("ProbeDefinitions" include nil nil [160 208])
            ("SensorDataGenerator" include nil nil [209 261])
            ("FieldEstimator" include nil nil [262 309])
            ("Trayectory" include nil nil [310 353])
            ("CommonFunctions" include nil nil [354 402])
            ("Supervisor" include nil nil [403 446])
            ("PlotFunctions" include nil nil [447 507])
            ("Quaternion" include nil nil [508 554])
            ("SensorsKalmanFilter" include nil nil [555 607])
            ("SimulationResults" include nil nil [608 642])
            ("NeedleDetectionFilter" include nil nil [643 698])
            ("settings" include nil nil [700 715])
            ("matplotlib.pyplot" include nil nil [717 748])
            ("lmfit" include nil nil [750 811])
            ("numpy" include nil nil [813 872])
            ("numpy.linalg" include nil nil [873 907])
            ("copy" include nil nil [909 920])
            ("itertools" include nil nil [921 937])
            ("if" code nil nil [939 9436]))          
      :file "run_model.py"
      :pointmax 9438
      :fsize 9437
      :lastmodtime '(21860 37469 761968 383000)
      :unmatched-syntax nil)
    (semanticdb-table "Supervisor.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 23])
            ("Supervisor" type
               (:documentation "
    A class to implement the input and output supervisors of the optimizer.

    The input supervisor checks the data prior to the optimizer step, indicting whether
    the data is suitable for the optimizer.
    The output supervisor checks the results of the optimizer and validates them.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initializer
        \"\"\"" code nil (reparse-symbol indented_block_body) [391 426])
                            ("self" variable nil (reparse-symbol indented_block_body) [435 465])
                            ("self" variable nil (reparse-symbol indented_block_body) [474 505])
                            ("self" variable nil (reparse-symbol indented_block_body) [515 530])
                            ("self" variable nil (reparse-symbol indented_block_body) [539 554])
                            ("self" variable nil (reparse-symbol indented_block_body) [563 578])
                            ("self" variable nil (reparse-symbol indented_block_body) [588 977])
                            ("self" variable nil (reparse-symbol indented_block_body) [987 1022])
                            ("self" variable nil (reparse-symbol indented_block_body) [1031 1067]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [376 380]))                          
                        :documentation "
        Initializer
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [363 1068])
                    ("FieldPower" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1097 1101])
                            ("mx" variable nil (reparse-symbol function_parameters) [1103 1105])
                            ("my" variable nil (reparse-symbol function_parameters) [1107 1109])
                            ("mz" variable nil (reparse-symbol function_parameters) [1111 1113])
                            ("valid" variable nil (reparse-symbol function_parameters) [1115 1120]))                          
                        :documentation "
        Calculate the sum of the field for the input data.

        @param [in] mx input field in the Bx coordinate for all sensors.
        @param [in] my input field in the By coordinate for all sensors.
        @param [in] mz input field in the Bz coordinate for all sensors.
        @param [in] valid indicates if the sensor readings are valid.

        @return the sum of the field values for all valid sensors.
        ")
                        (reparse-symbol indented_block_body) [1082 1635])
                    ("FieldDispersion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1660 1664])
                            ("mx" variable nil (reparse-symbol function_parameters) [1666 1668])
                            ("my" variable nil (reparse-symbol function_parameters) [1670 1672])
                            ("mz" variable nil (reparse-symbol function_parameters) [1674 1676])
                            ("valid" variable nil (reparse-symbol function_parameters) [1678 1683]))                          
                        :documentation "
        Calculate the dispersion over the average of the input data

        @param [in] mx input field in the Bx coordinate for all sensors.
        @param [in] my input field in the By coordinate for all sensors.
        @param [in] mz input field in the Bz coordinate for all sensors.
        @param [in] valid indicates if the sensor readings are valid.

        @return the sum of the field values for all valid sensors.
        ")
                        (reparse-symbol indented_block_body) [1640 2407])
                    ("EnableInputSupervisor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2438 2442]))                          
                        :documentation "
        Function to force a pass result
        ")
                        (reparse-symbol indented_block_body) [2412 2559])
                    ("EnableoutputSupervisor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2591 2595]))                          
                        :documentation "
        Function to force a pass result
        ")
                        (reparse-symbol indented_block_body) [2564 2713])
                    ("InputSupervisor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2743 2747])
                            ("mx" variable nil (reparse-symbol function_parameters) [2749 2751])
                            ("my" variable nil (reparse-symbol function_parameters) [2753 2755])
                            ("mz" variable nil (reparse-symbol function_parameters) [2757 2759])
                            ("valid" variable nil (reparse-symbol function_parameters) [2761 2766]))                          
                        :documentation "
        Verifies that the dispersion of the input data is above the threshold

        @param [in] mx input field in the Bx coordinate for all sensors.
        @param [in] my input field in the By coordinate for all sensors.
        @param [in] mz input field in the Bz coordinate for all sensors.
        @param [in] valid indicates if the sensor readings are valid.

        @return a pair with the error number and message
        ")
                        (reparse-symbol indented_block_body) [2723 3509])
                    ("CheckTipLimits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3534 3538])
                            ("tip" variable nil (reparse-symbol function_parameters) [3540 3543]))                          )
                        (reparse-symbol indented_block_body) [3514 3834])
                    ("OutputSupervisor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3861 3865])
                            ("tip" variable nil (reparse-symbol function_parameters) [3867 3870])
                            ("residual" variable nil (reparse-symbol function_parameters) [3872 3880]))                          
                        :documentation "
        Verifies that the output of the supervisor is within constrains

        @param [in] tip the coordiantes of the tip relative to the center of the probe.
        @param [in] residual the value of the residual returned by the optimizer.
        ")
                        (reparse-symbol indented_block_body) [3839 4382]))                  
                :type "class")
                nil [25 4382]))          
      :file "Supervisor.py"
      :pointmax 4382
      :fsize 4381
      :lastmodtime '(21860 37469 760968 377000)
      :unmatched-syntax '((RETURN 2670 . 2676) (ASSIGN 2706 . 2707) (RETURN 2517 . 2523) (ASSIGN 2552 . 2553)))
    (semanticdb-table "PlotFunctions.py"
      :major-mode 'python-mode
      :tags 
        '( ("matplotlib.pyplot" include nil nil [1 77])
            ("numpy" include nil nil [78 122])
            ("Quaternion" include nil nil [124 157])
            ("CommonFunctions" include nil nil [159 195])
            ("PlotInputField" function (:arguments 
              ( ("mxIn" variable nil (reparse-symbol function_parameters) [218 222])
                ("myIn" variable nil (reparse-symbol function_parameters) [224 228])
                ("mzIn" variable nil (reparse-symbol function_parameters) [230 234])
                ("mxOut" variable nil (reparse-symbol function_parameters) [236 241])
                ("myOut" variable nil (reparse-symbol function_parameters) [243 248])
                ("mzOut" variable nil (reparse-symbol function_parameters) [250 255])
                ("title_" variable nil (reparse-symbol function_parameters) [257 263])
                ("inPutTitle" variable nil (reparse-symbol function_parameters) [265 275])
                ("outPutTitle" variable nil (reparse-symbol function_parameters) [277 288]))              ) nil [198 714])
            ("PlotResults" function (:arguments 
              ( ("res" variable nil (reparse-symbol function_parameters) [732 735])
                ("expected" variable nil (reparse-symbol function_parameters) [737 745]))              ) nil [715 3065]))          
      :file "PlotFunctions.py"
      :pointmax 2576
      :fsize 3064
      :lastmodtime '(21853 46802 777235 873000)
      :unmatched-syntax nil)
    (semanticdb-table "SensorsKalmanFilter.py"
      :file "SensorsKalmanFilter.py"
      :fsize 3094
      :lastmodtime '(21855 8770 600515 478000))
    (semanticdb-table "run_model_quat.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [24 61])
            ("LookupTableGenerator" include nil nil [63 116])
            ("Multipole" include nil nil [117 159])
            ("ProbeDefinitions" include nil nil [160 208])
            ("SensorDataGenerator" include nil nil [209 261])
            ("FieldEstimator" include nil nil [262 309])
            ("Trayectory" include nil nil [310 353])
            ("CommonFunctions" include nil nil [354 402])
            ("Supervisor" include nil nil [403 446])
            ("PlotFunctions" include nil nil [447 507])
            ("SimulationResults" include nil nil [508 542])
            ("settings" include nil nil [544 559])
            ("matplotlib.pyplot" include nil nil [561 592])
            ("lmfit" include nil nil [594 655])
            ("numpy" include nil nil [657 712])
            ("numpy.linalg" include nil nil [713 747])
            ("numpy" include nil nil [749 807])
            ("copy" include nil nil [808 819])
            ("SensorsKalmanFilter" include nil nil [821 872])
            ("if" code nil nil [875 9888]))          
      :file "run_model_quat.py"
      :pointmax 9890
      :fsize 9889
      :lastmodtime '(21855 12287 656981 674000)
      :unmatched-syntax nil)
    (semanticdb-table "SimulationResults.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [25 55])
            ("settings" include nil nil [57 72])
            ("SimulationResults" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [239 263])
                            ("self" code nil (reparse-symbol indented_block_body) [272 310])
                            ("if" code nil (reparse-symbol indented_block_body) [319 1096]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [198 202])
                            ("noPoints" variable nil (reparse-symbol function_parameters) [204 212])
                            ("use_quat" variable nil (reparse-symbol function_parameters) [214 222]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [184 1096])
                    ("PrintResults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1131 1135])
                            ("idx" variable nil (reparse-symbol function_parameters) [1137 1140])
                            ("result" variable nil (reparse-symbol function_parameters) [1142 1148])
                            ("ltg" variable nil (reparse-symbol function_parameters) [1150 1153]))                          )
                        (reparse-symbol indented_block_body) [1114 1735])
                    ("SaveResults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1756 1760])
                            ("idx" variable nil (reparse-symbol function_parameters) [1762 1765])
                            ("result" variable nil (reparse-symbol function_parameters) [1767 1773])
                            ("params" variable nil (reparse-symbol function_parameters) [1782 1788]))                          )
                        (reparse-symbol indented_block_body) [1740 3030]))                  
                :type "class")
                nil [155 3030]))          
      :file "SimulationResults.py"
      :pointmax 3030
      :fsize 3029
      :lastmodtime '(21860 37469 759968 371000)
      :unmatched-syntax nil)
    (semanticdb-table "NeedleDetectionFilter.py"
      :major-mode 'python-mode
      :tags 
        '( ("lmfit" include nil nil [25 86])
            ("NeedleDetectionFilter" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [169 195])
                            ("self" variable nil (reparse-symbol indented_block_body) [205 235])
                            ("self" code nil (reparse-symbol indented_block_body) [245 272]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137 141])
                            ("use_quat" variable nil (reparse-symbol function_parameters) [143 151]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [123 273])
                    ("InitilizeParamerters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [303 307]))                          
                        :documentation "
        Initializes the parameters to be passed to the optimzer.
        The set of paramters changes depending on the type of
        implementation of the field detection (i.e. based on Euler
        angles or on quaternions)
        ")
                        (reparse-symbol indented_block_body) [278 1122])
                    ("InitializeFilter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1156 1160])
                            ("multipole" variable nil (reparse-symbol function_parameters) [1162 1171])
                            ("sData" variable nil (reparse-symbol function_parameters) [1173 1178])
                            ("ltg" variable nil (reparse-symbol function_parameters) [1180 1183])
                            ("fld" variable nil (reparse-symbol function_parameters) [1185 1188]))                          
                        :documentation "
        Initializes the filter for the simualtion.

        @params multipole [in] multipole model
        @params sData     [in] sensor values
        @params ltg       [in] lookup table for the field
        @params fld       [in] field generator
        ")
                        (reparse-symbol indented_block_body) [1135 1661])
                    ("PrepareInputs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1692 1696])
                            ("needleFound" variable nil (reparse-symbol function_parameters) [1698 1709]))                          
                        :documentation "
        Checks the input arguments and sets the internal
        parameters, if the previous needle was found use the previous
        needle as the starting parameter, otherwise use the a random
        needle places around the sensor with the biggest reading.

        @params needleFound [in] previous needle found status, if the
                      previous needle was found use the previous values
                      for the needle, if it was not found, then set
                      the parameters to a random position.

        ")
                        (reparse-symbol indented_block_body) [1674 3119])
                    ("ExecuteFilter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3143 3147]))                          
                        :documentation "
        Executes one iteration of the minimizer function 
        ")
                        (reparse-symbol indented_block_body) [3125 3600])
                    ("PrepareOutputs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3632 3636])
                            ("iSupResult" variable nil (reparse-symbol function_parameters) [3637 3647])
                            ("result" variable nil (reparse-symbol function_parameters) [3649 3655])
                            ("simResults" variable nil (reparse-symbol function_parameters) [3657 3667]))                          
                        :documentation "
        Place holder; does nothing
        ")
                        (reparse-symbol indented_block_body) [3613 3817])
                    ("RunFilter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3844 3848])
                            ("iSupResult" variable nil (reparse-symbol function_parameters) [3868 3878])
                            ("previousNeedleFound" variable nil (reparse-symbol function_parameters) [3880 3899])
                            ("initialtTip" variable nil (reparse-symbol function_parameters) [3919 3930])
                            ("trayectory" variable nil (reparse-symbol function_parameters) [3932 3942])
                            ("mx" variable nil (reparse-symbol function_parameters) [3962 3964])
                            ("my" variable nil (reparse-symbol function_parameters) [3966 3968])
                            ("mz" variable nil (reparse-symbol function_parameters) [3970 3972])
                            ("simResults" variable nil (reparse-symbol function_parameters) [3992 4002]))                          
                        :documentation "
        Runs one iteration of the optimizer.
        @param iSupResult [in] the input supervisor output, if the input supervisor
                               failed no processing is done
        @param simResults [inout] use this variable to save the results of the current
                               iteration
        ")
                        (reparse-symbol indented_block_body) [3830 4547]))                  
                :type "class")
                nil [89 4547]))          
      :file "NeedleDetectionFilter.py"
      :pointmax 4564
      :fsize 4563
      :lastmodtime '(21860 35861 131651 841000)
      :unmatched-syntax nil))
  :file "!sandbox!workspace!research!NGS_Investigation!Rotation_Modelling!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
