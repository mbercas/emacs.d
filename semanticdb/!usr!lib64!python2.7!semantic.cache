;; Object python2.7/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.7/"
  :tables
  (list
    (semanticdb-table "__future__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
      :file "__future__.py"
      :pointmax 4381
      :fsize 4380
      :lastmodtime '(21806 12006 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "copy.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
\"pickle\" for information on these methods.
\"\"\"" code nil nil [1 1748])
            ("types" include nil nil [1750 1762])
            ("weakref" include nil nil [1763 1777])
            ("copy_reg" include nil nil [1778 1813])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1843 1847]))                  
                :type "class")
                nil [1815 1848])
            ("error" variable nil nil [1848 1861])
            ("try" code nil nil [1890 1982])
            ("__all__" variable nil nil [1983 2022])
            ("copy" function
               (:documentation "Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [2033 2034]))                  )
                nil [2024 2786])
            ("_copy_dispatch" variable nil nil [2788 2811])
            ("_copy_immutable" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [2833 2834]))              ) nil [2813 2850])
            ("for" code nil nil [2850 3084])
            ("for" code nil nil [3084 3228])
            ("_copy_with_constructor" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3256 3257]))              ) nil [3229 3282])
            ("for" code nil nil [3282 3344])
            ("_copy_with_copy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3372 3373]))              ) nil [3345 3396])
            ("if" code nil nil [3396 3468])
            ("_copy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3484 3485]))              ) nil [3469 3947])
            ("d" variable nil nil [3947 3981])
            ("del" code nil nil [3983 3988])
            ("deepcopy" function
               (:documentation "Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [4003 4004])
                    ("memo" variable nil (reparse-symbol function_parameters) [4006 4010])
                    ("_nil" variable nil (reparse-symbol function_parameters) [4017 4021]))                  )
                nil [3990 5472])
            ("_deepcopy_dispatch" variable nil nil [5473 5500])
            ("_deepcopy_atomic" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5523 5524])
                ("memo" variable nil (reparse-symbol function_parameters) [5526 5530]))              ) nil [5502 5546])
            ("d" variable nil nil [5546 5578])
            ("d" variable nil nil [5579 5615])
            ("d" variable nil nil [5616 5641])
            ("d" variable nil nil [5642 5668])
            ("d" variable nil nil [5669 5696])
            ("d" variable nil nil [5697 5723])
            ("try" code nil nil [5724 5790])
            ("d" variable nil nil [5790 5815])
            ("try" code nil nil [5816 5882])
            ("try" code nil nil [5882 5960])
            ("d" variable nil nil [5960 5986])
            ("d" variable nil nil [5987 6015])
            ("d" variable nil nil [6016 6053])
            ("d" variable nil nil [6054 6101])
            ("d" variable nil nil [6102 6142])
            ("d" variable nil nil [6143 6176])
            ("_deepcopy_list" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6197 6198])
                ("memo" variable nil (reparse-symbol function_parameters) [6200 6204]))              ) nil [6178 6303])
            ("d" variable nil nil [6303 6327])
            ("_deepcopy_tuple" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6349 6350])
                ("memo" variable nil (reparse-symbol function_parameters) [6352 6356]))              ) nil [6329 6655])
            ("d" variable nil nil [6655 6681])
            ("_deepcopy_dict" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6702 6703])
                ("memo" variable nil (reparse-symbol function_parameters) [6705 6709]))              ) nil [6683 6848])
            ("d" variable nil nil [6848 6872])
            ("if" code nil nil [6873 6937])
            ("_deepcopy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6959 6960])
                ("memo" variable nil (reparse-symbol function_parameters) [6962 6966]))              ) nil [6938 7062])
            ("_deepcopy_dispatch" variable nil nil [7062 7117])
            ("_keep_alive" function
               (:documentation "Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7135 7136])
                    ("memo" variable nil (reparse-symbol function_parameters) [7138 7142]))                  )
                nil [7119 7620])
            ("_deepcopy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7640 7641])
                ("memo" variable nil (reparse-symbol function_parameters) [7643 7647]))              ) nil [7621 8211])
            ("d" variable nil nil [8211 8249])
            ("_reconstruct" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [8268 8269])
                ("info" variable nil (reparse-symbol function_parameters) [8271 8275])
                ("deep" variable nil (reparse-symbol function_parameters) [8277 8281])
                ("memo" variable nil (reparse-symbol function_parameters) [8283 8287]))              ) nil [8251 9696])
            ("del" code nil nil [9697 9702])
            ("del" code nil nil [9704 9713])
            ("_EmptyClass" type
               (:members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [9794 9798]))                  
                :type "class")
                nil [9771 9799])
            ("_test" function nil nil [9800 11480])
            ("if" code nil nil [11481 11520]))          
      :file "copy.py"
      :pointmax 11520
      :fsize 11519
      :lastmodtime '(21806 12006 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "warnings.py"
      :file "warnings.py"
      :fsize 14044
      :lastmodtime '(21806 12006 0 0))
    (semanticdb-table "types.py"
      :file "types.py"
      :fsize 2040
      :lastmodtime '(21806 12006 0 0))
    (semanticdb-table "weakref.py"
      :file "weakref.py"
      :fsize 12961
      :lastmodtime '(21806 12006 0 0))
    (semanticdb-table "copy_reg.py"
      :file "copy_reg.py"
      :fsize 6800
      :lastmodtime '(21806 12006 0 0)))
  :file "!usr!lib64!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
