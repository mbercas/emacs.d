;; Object matplotlib/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "matplotlib/"
  :tables
  (list
    (semanticdb-table "pyplot.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Provides a MATLAB-like plotting framework.

:mod:`~matplotlib.pylab` combines pyplot with numpy into a single namespace.
This is convenient for interactive work, but for programming it
is recommended that the namespaces be kept separate, e.g.::

    import numpy as np
    import matplotlib.pyplot as plt

    x = np.arange(0, 5, 0.1);
    y = np.sin(x)
    plt.plot(x, y)

\"\"\"" code nil nil [132 513])
            ("__future__" include nil nil [514 551])
            ("sys" include nil nil [553 563])
            ("warnings" include nil nil [564 579])
            ("matplotlib" include nil nil [581 598])
            ("matplotlib.colorbar" include nil nil [599 625])
            ("matplotlib" include nil nil [626 676])
            ("matplotlib.cbook" include nil nil [677 753])
            ("matplotlib" include nil nil [754 786])
            ("matplotlib.backend_bases" include nil nil [787 840])
            ("matplotlib.figure" include nil nil [841 888])
            ("matplotlib.gridspec" include nil nil [889 929])
            ("matplotlib.image" include nil nil [930 976])
            ("matplotlib.image" include nil nil [977 1023])
            ("matplotlib" include nil nil [1024 1085])
            ("matplotlib" include nil nil [1086 1119])
            ("matplotlib.rcsetup" include nil nil [1120 1184])
            ("matplotlib.artist" include nil nil [1185 1232])
            ("matplotlib.artist" include nil nil [1233 1276])
            ("matplotlib.axes" include nil nil [1277 1335])
            ("matplotlib.projections" include nil nil [1336 1380])
            ("matplotlib" include nil nil [1381 1408])
            ("matplotlib.scale" include nil nil [1454 1514])
            ("matplotlib" include nil nil [1516 1541])
            ("matplotlib.cm" include nil nil [1542 1591])
            ("numpy" include nil nil [1593 1611])
            ("matplotlib.colors" include nil nil [1659 1698])
            ("matplotlib.colors" include nil nil [1699 1738])
            ("matplotlib.lines" include nil nil [1764 1799])
            ("matplotlib.text" include nil nil [1800 1844])
            ("matplotlib.patches" include nil nil [1845 1909])
            ("matplotlib.widgets" include nil nil [1910 1976])
            ("ticker" include nil nil [1978 2339])
            ("_backend_selection" function (:documentation " If rcParams['backend_fallback'] is true, check to see if the
        current backend is compatible with the current running event
        loop, and if not switches to a compatible one.
    ") nil [2366 3626])
            ("_backend_selection" code nil nil [3627 3647])
            ("matplotlib.backends" include nil nil [3663 3706])
            ("_backend_mod, new_figure_manager, draw_if_interactive, _show" code nil nil [3707 3783])
            ("" code nil nil [3808 3824])
            ("findobj" function (:arguments 
              ( ("o" variable nil (reparse-symbol function_parameters) [3837 3838])
                ("match" variable nil (reparse-symbol function_parameters) [3845 3850])
                ("include_self" variable nil (reparse-symbol function_parameters) [3857 3869]))              ) nil [3825 3968])
            ("switch_backend" function
               (:documentation "
    Switch the default backend.  This feature is **experimental**, and
    is only expected to work switching to an image backend.  e.g., if
    you have a bunch of PostScript scripts that you want to run from
    an interactive ipython session, you may want to switch to the PS
    backend before running them to avoid having a bunch of GUI windows
    popup.  If you try to interactively switch from one GUI backend to
    another, you will explode.

    Calling this command will close all open windows.
    "
                :arguments 
                  ( ("newbackend" variable nil (reparse-symbol function_parameters) [3989 3999]))                  )
                nil [3970 4798])
            ("show" function
               (:documentation "
    Display a figure.

    When running in ipython with its pylab mode, display all
    figures and return to the ipython prompt.

    In non-interactive mode, display all figures and block until
    the figures have been closed; in interactive mode it has no
    effect unless figures were created prior to a change from
    non-interactive to interactive mode (not recommended).  In
    that case it displays the figures but does not block.

    A single experimental keyword argument, *block*, may be
    set to True or False to override the blocking behavior
    described above.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [4809 4814])
                    ("kw" variable nil (reparse-symbol function_parameters) [4816 4820]))                  )
                nil [4800 5463])
            ("isinteractive" function (:documentation "
    Return status of interactive mode.
    ") nil [5465 5580])
            ("ioff" function nil nil [5582 5661])
            ("ion" function nil nil [5663 5739])
            ("pause" function
               (:documentation "
    Pause for *interval* seconds.

    If there is an active figure it will be updated and displayed,
    and the GUI event loop will run during the pause.

    If there is no active figure, or if a non-interactive backend
    is in use, this executes time.sleep(interval).

    This can be used for crude animation. For more complex
    animation, see :mod:`matplotlib.animation`.

    This function is experimental; its behavior may be changed
    or extended in a future release.

    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [5751 5759]))                  )
                nil [5741 6685])
            ("" code nil nil [6709 6724])
            ("rc" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [6732 6737])
                ("kwargs" variable nil (reparse-symbol function_parameters) [6739 6747]))              ) nil [6725 6785])
            ("" code nil nil [6809 6832])
            ("rc_context" function (:arguments 
              ( ("rc" variable nil (reparse-symbol function_parameters) [6848 6850])
                ("fname" variable nil (reparse-symbol function_parameters) [6857 6862]))              ) nil [6833 6914])
            ("" code nil nil [6938 6961])
            ("rcdefaults" function nil nil [6962 7034])
            ("gci" function (:documentation "
    Get the current colorable artist.  Specifically, returns the
    current :class:`~matplotlib.cm.ScalarMappable` instance (image or
    patch collection), or *None* if no images or patch collections
    have been defined.  The commands :func:`~matplotlib.pyplot.imshow`
    and :func:`~matplotlib.pyplot.figimage` create
    :class:`~matplotlib.image.Image` instances, and the commands
    :func:`~matplotlib.pyplot.pcolor` and
    :func:`~matplotlib.pyplot.scatter` create
    :class:`~matplotlib.collections.Collection` instances.  The
    current image is an attribute of the current axes, or the nearest
    earlier axes in the current figure that contains an image.
    ") nil [7164 7889])
            ("sci" function
               (:documentation "
    Set the current image.  This image will be the target of colormap
    commands like :func:`~matplotlib.pyplot.jet`,
    :func:`~matplotlib.pyplot.hot` or
    :func:`~matplotlib.pyplot.clim`).  The current image is an
    attribute of the current axes.
    "
                :arguments 
                  ( ("im" variable nil (reparse-symbol function_parameters) [7899 7901]))                  )
                nil [7891 8195])
            ("" code nil nil [8257 8264])
            ("setp" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [8274 8279])
                ("kwargs" variable nil (reparse-symbol function_parameters) [8281 8289]))              ) nil [8265 8366])
            ("xkcd" function
               (:documentation "
    Turns on `xkcd <http://xkcd.com/>`_ sketch-style drawing mode.
    This will only have effect on things drawn after this function is
    called.

    For best results, the \"Humor Sans\" font should be installed: it is
    not included with matplotlib.

    Parameters
    ----------
    scale: float, optional
        The amplitude of the wiggle perpendicular to the source line.
    length: float, optional
        The length of the wiggle along the line.
    randomness: float, optional
        The scale factor by which the length is shrunken or expanded.

    This function works by a number of rcParams, so it will probably
    override others you have set before.

    If you want the effects of this function to be temporary, it can
    be used as a context manager, for example::

        with plt.xkcd():
            # This figure will be in XKCD-style
            fig1 = plt.figure()
            # ...

        # This figure will be in regular style
        fig2 = plt.figure()
    "
                :arguments 
                  ( ("scale" variable nil (reparse-symbol function_parameters) [8377 8382])
                    ("length" variable nil (reparse-symbol function_parameters) [8386 8392])
                    ("randomness" variable nil (reparse-symbol function_parameters) [8398 8408]))                  )
                nil [8368 10433])
            ("figure" function
               (:documentation "
    Creates a new figure.

    Parameters
    ----------

    num : integer or string, optional, default: none
        If not provided, a new figure will be created, and a the figure number
        will be increamted. The figure objects holds this number in a `number`
        attribute.
        If num is provided, and a figure with this id already exists, make
        it active, and returns a reference to it. If this figure does not
        exists, create it and returns it.
        If num is a string, the window title will be set to this figure's
        `num`.

    figsize : tuple of integers, optional, default : None
        width, height in inches. If not provided, defaults to rc
        figure.figsize.

    dpi : integer, optional, default ; None
        resolution of the figure. If not provided, defaults to rc figure.dpi.

    facecolor :
        the background color; If not provided, defaults to rc figure.facecolor

    edgecolor :
        the border color. If not provided, defaults to rc figure.edgecolor

    Returns
    -------
    figure : Figure
        The Figure instance returned will also be passed to new_figure_manager
        in the backends, which allows to hook custom Figure classes into the
        pylab interface. Additional kwargs will be passed to the figure init
        function.

    Note
    ----
    If you are creating many figures, make sure you explicitly call \"close\"
    on the figures you are not using, because this will enable pylab
    to properly clean up the memory.

    rcParams defines the default values, which can be modified in the
    matplotlibrc file

    "
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [10461 10464])
                    ("figsize" variable nil (reparse-symbol function_parameters) [10530 10537])
                    ("dpi" variable nil (reparse-symbol function_parameters) [10588 10591])
                    ("facecolor" variable nil (reparse-symbol function_parameters) [10638 10647])
                    ("edgecolor" variable nil (reparse-symbol function_parameters) [10700 10709])
                    ("frameon" variable nil (reparse-symbol function_parameters) [10762 10769])
                    ("FigureClass" variable nil (reparse-symbol function_parameters) [10787 10798])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [10818 10826]))                  )
                nil [10450 15008])
            ("gcf" function nil nil [15010 15224])
            ("fignum_exists" variable nil nil [15225 15270])
            ("get_fignums" function (:documentation "Return a list of existing figure numbers.") nil [15273 15427])
            ("get_figlabels" function nil nil [15429 15661])
            ("get_current_fig_manager" function nil nil [15663 15904])
            ("" code nil nil [15928 15958])
            ("connect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [15971 15972])
                ("func" variable nil (reparse-symbol function_parameters) [15974 15978]))              ) nil [15959 16046])
            ("" code nil nil [16070 16103])
            ("disconnect" function (:arguments 
              ( ("cid" variable nil (reparse-symbol function_parameters) [16119 16122]))              ) nil [16104 16189])
            ("close" function
               (:documentation "
    Close a figure window.

    ``close()`` by itself closes the current figure

    ``close(h)`` where *h* is a :class:`Figure` instance, closes that figure

    ``close(num)`` closes figure number *num*

    ``close(name)`` where *name* is a string, closes figure with that label

    ``close('all')`` closes all the figure windows
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [16201 16206]))                  )
                nil [16191 17412])
            ("clf" function (:documentation "
    Clear the current figure.
    ") nil [17414 17513])
            ("draw" function (:documentation "
    Redraw the current figure.

    This is used in interactive mode to update a figure that
    has been altered using one or more plot object method calls;
    it is not needed if figure modification is done entirely
    with pyplot functions, if a sequence of modifications ends
    with a pyplot function, or if matplotlib is in non-interactive
    mode and the sequence of modifications ends with :func:`show` or
    :func:`savefig`.

    A more object-oriented alternative, given any
    :class:`~matplotlib.figure.Figure` instance, :attr:`fig`, that
    was created using a :mod:`~matplotlib.pyplot` function, is::

        fig.canvas.draw()


    ") nil [17515 18238])
            ("" code nil nil [18262 18278])
            ("savefig" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [18291 18296])
                ("kwargs" variable nil (reparse-symbol function_parameters) [18298 18306]))              ) nil [18279 18365])
            ("" code nil nil [18389 18404])
            ("ginput" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* clicks from the user and return a list of the
    coordinates of each click.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [18416 18421])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [18423 18431]))                  )
                nil [18405 18692])
            ("" code nil nil [18716 18743])
            ("waitforbuttonpress" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* key or mouse clicks from the user and
    return a list containing True's for keyboard clicks and False's
    for mouse clicks.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [18767 18772])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [18774 18782]))                  )
                nil [18744 19106])
            ("" code nil nil [19159 19172])
            ("figtext" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [19185 19190])
                ("kwargs" variable nil (reparse-symbol function_parameters) [19192 19200]))              ) nil [19173 19284])
            ("" code nil nil [19308 19325])
            ("suptitle" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [19339 19344])
                ("kwargs" variable nil (reparse-symbol function_parameters) [19346 19354]))              ) nil [19326 19441])
            ("" code nil nil [19462 19537])
            ("" code nil nil [19560 19577])
            ("figimage" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [19591 19596])
                ("kwargs" variable nil (reparse-symbol function_parameters) [19598 19606]))              ) nil [19578 19853])
            ("figlegend" function
               (:documentation "
    Place a legend in the figure.

    *labels*
      a sequence of strings

    *handles*
      a sequence of :class:`~matplotlib.lines.Line2D` or
      :class:`~matplotlib.patches.Patch` instances

    *loc*
      can be a string or an integer specifying the legend
      location

    A :class:`matplotlib.legend.Legend` instance is returned.

    Example::

      figlegend( (line1, line2, line3),
                 ('label1', 'label2', 'label3'),
                 'upper right' )

    .. seealso::

       :func:`~matplotlib.pyplot.legend`

    "
                :arguments 
                  ( ("handles" variable nil (reparse-symbol function_parameters) [19869 19876])
                    ("labels" variable nil (reparse-symbol function_parameters) [19878 19884])
                    ("loc" variable nil (reparse-symbol function_parameters) [19886 19889])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [19891 19899]))                  )
                nil [19855 20555])
            ("hold" function
               (:documentation "
    Set the hold state.  If *b* is None (default), toggle the
    hold state, else set the hold state to boolean value *b*::

      hold()      # toggle hold
      hold(True)  # hold is on
      hold(False) # hold is off

    When *hold* is *True*, subsequent plot commands will be added to
    the current axes.  When *hold* is *False*, the current axes and
    figure will be cleared on the next plot command.
    "
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [20596 20597]))                  )
                nil [20587 21297])
            ("ishold" function (:documentation "
    Return the hold status of the current axes.
    ") nil [21299 21403])
            ("over" function
               (:documentation "
    Call a function with hold(True).

    Calls::

      func(*args, **kwargs)

    with ``hold(True)`` and then restores the hold state.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [21414 21418])
                    ("args" variable nil (reparse-symbol function_parameters) [21420 21425])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [21427 21435]))                  )
                nil [21405 21662])
            ("axes" function
               (:documentation "
    Add an axes to the figure.

    The axes is added at position *rect* specified by:

    - ``axes()`` by itself creates a default full ``subplot(111)`` window axis.

    - ``axes(rect, axisbg='w')`` where *rect* = [left, bottom, width,
      height] in normalized (0, 1) units.  *axisbg* is the background
      color for the axis, default white.

    - ``axes(h)`` where *h* is an axes instance makes *h* the current
      axis.  An :class:`~matplotlib.axes.Axes` instance is returned.

    =======   ============   ================================================
    kwarg     Accepts        Description
    =======   ============   ================================================
    axisbg    color          the axes background color
    frameon   [True|False]   display the frame?
    sharex    otherax        current axes shares xaxis attribute with otherax
    sharey    otherax        current axes shares yaxis attribute with otherax
    polar     [True|False]   use a polar axes?
    =======   ============   ================================================

    Examples:

    * :file:`examples/pylab_examples/axes_demo.py` places custom axes.
    * :file:`examples/pylab_examples/shared_axis_demo.py` uses
      *sharex* and *sharey*.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [21685 21690])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [21692 21700]))                  )
                nil [21676 23316])
            ("delaxes" function
               (:documentation "
    Remove an axes from the current figure.  If *ax*
    doesn't exist, an error will be raised.

    ``delaxes()``: delete the current axes
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [23330 23335]))                  )
                nil [23318 23636])
            ("sca" function
               (:documentation "
    Set the current Axes instance to *ax*.

    The current Figure is updated to the parent of *ax*.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [23646 23648]))                  )
                nil [23638 24061])
            ("gca" function
               (:documentation "
    Return the current axis instance.  This can be used to control
    axis properties either using set or the
    :class:`~matplotlib.axes.Axes` methods, for example, setting the
    xaxis range::

      plot(t,s)
      set(gca(), 'xlim', [0,10])

    or::

      plot(t,s)
      a = gca()
      a.set_xlim([0,10])

    "
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [24071 24079]))                  )
                nil [24063 24460])
            ("subplot" function
               (:documentation "
    Return a subplot axes positioned by the given grid definition.

    Typical call signature::

      subplot(nrows, ncols, plot_number)

    Where *nrows* and *ncols* are used to notionally split the figure
    into ``nrows * ncols`` sub-axes, and *plot_number* is used to identify
    the particular subplot that this function is to create within the notional
    grid. *plot_number* starts at 1, increments across rows first and has a
    maximum of ``nrows * ncols``.

    In the case when *nrows*, *ncols* and *plot_number* are all less than 10,
    a convenience exists, such that the a 3 digit number can be given instead,
    where the hundreds represent *nrows*, the tens represent *ncols* and the
    units represent *plot_number*. For instance::

      subplot(211)

    produces a subaxes in a figure which represents the top plot (i.e. the
    first) in a 2 row by 1 column notional grid (no grid actually exists,
    but conceptually this is how the returned subplot has been positioned).

    .. note::

       Creating a new subplot with a position which is entirely inside a
       pre-existing axes will trigger the larger axes to be deleted::

          import matplotlib.pyplot as plt
          # plot a line, implicitly creating a subplot(111)
          plt.plot([1,2,3])
          # now create a subplot which represents the top plot of a grid
          # with 2 rows and 1 column. Since this subplot will overlap the
          # first, the plot (and its axes) previously created, will be removed
          plt.subplot(211)
          plt.plot(range(12))
          plt.subplot(212, axisbg='y') # creates 2nd subplot with yellow background

       If you do not want this behavior, use the
       :meth:`~matplotlib.figure.Figure.add_subplot` method or the
       :func:`~matplotlib.pyplot.axes` function instead.

    Keyword arguments:

      *axisbg*:
        The background color of the subplot, which can be any valid
        color specifier.  See :mod:`matplotlib.colors` for more
        information.

      *polar*:
        A boolean flag indicating whether the subplot plot should be
        a polar projection.  Defaults to *False*.

      *projection*:
        A string giving the name of a custom projection to be used
        for the subplot. This projection must have been previously
        registered. See :mod:`matplotlib.projections`.

    .. seealso::

        :func:`~matplotlib.pyplot.axes`
            For additional information on :func:`axes` and
            :func:`subplot` keyword arguments.

        :file:`examples/pie_and_polar_charts/polar_scatter_demo.py`
            For an example

    **Example:**

    .. plot:: mpl_examples/subplots_axes_and_figures/subplot_demo.py

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [24504 24509])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [24511 24519]))                  )
                nil [24492 28229])
            ("subplots" function
               (:documentation "
    Create a figure with a set of subplots already made.

    This utility wrapper makes it convenient to create common layouts of
    subplots, including the enclosing figure object, in a single call.

    Keyword arguments:

      *nrows* : int
        Number of rows of the subplot grid.  Defaults to 1.

      *ncols* : int
        Number of columns of the subplot grid.  Defaults to 1.

      *sharex* : string or bool
        If *True*, the X axis will be shared amongst all subplots.  If
        *True* and you have multiple rows, the x tick labels on all but
        the last row of plots will have visible set to *False*
        If a string must be one of \"row\", \"col\", \"all\", or \"none\".
        \"all\" has the same effect as *True*, \"none\" has the same effect
        as *False*.
        If \"row\", each subplot row will share a X axis.
        If \"col\", each subplot column will share a X axis and the x tick
        labels on all but the last row will have visible set to *False*.

      *sharey* : string or bool
        If *True*, the Y axis will be shared amongst all subplots. If
        *True* and you have multiple columns, the y tick labels on all but
        the first column of plots will have visible set to *False*
        If a string must be one of \"row\", \"col\", \"all\", or \"none\".
        \"all\" has the same effect as *True*, \"none\" has the same effect
        as *False*.
        If \"row\", each subplot row will share a Y axis.
        If \"col\", each subplot column will share a Y axis and the y tick
        labels on all but the last row will have visible set to *False*.

      *squeeze* : bool
        If *True*, extra dimensions are squeezed out from the
        returned axis object:

        - if only one subplot is constructed (nrows=ncols=1), the
          resulting single Axis object is returned as a scalar.

        - for Nx1 or 1xN subplots, the returned object is a 1-d numpy
          object array of Axis objects are returned as numpy 1-d
          arrays.

        - for NxM subplots with N>1 and M>1 are returned as a 2d
          array.

        If *False*, no squeezing at all is done: the returned axis
        object is always a 2-d array containing Axis instances, even if it
        ends up being 1x1.

      *subplot_kw* : dict
        Dict with keywords passed to the
        :meth:`~matplotlib.figure.Figure.add_subplot` call used to
        create each subplots.

      *fig_kw* : dict
        Dict with keywords passed to the :func:`figure` call.  Note that all
        keywords not recognized above will be automatically included here.

    Returns:

    fig, ax : tuple

      - *fig* is the :class:`matplotlib.figure.Figure` object

      - *ax* can be either a single axis object or an array of axis
        objects if more than one subplot was created.  The dimensions
        of the resulting array can be controlled with the squeeze
        keyword, see above.

    Examples::

        x = np.linspace(0, 2*np.pi, 400)
        y = np.sin(x**2)

        # Just a figure and one subplot
        f, ax = plt.subplots()
        ax.plot(x, y)
        ax.set_title('Simple plot')

        # Two subplots, unpack the output array immediately
        f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
        ax1.plot(x, y)
        ax1.set_title('Sharing Y axis')
        ax2.scatter(x, y)

        # Four polar axes
        plt.subplots(2, 2, subplot_kw=dict(polar=True))

        # Share a X axis with each column of subplots
        plt.subplots(2, 2, sharex='col')

        # Share a Y axis with each row of subplots
        plt.subplots(2, 2, sharey='row')

        # Share a X and Y axis with all subplots
        plt.subplots(2, 2, sharex='all', sharey='all')
        # same as
        plt.subplots(2, 2, sharex=True, sharey=True)
    "
                :arguments 
                  ( ("nrows" variable nil (reparse-symbol function_parameters) [28244 28249])
                    ("ncols" variable nil (reparse-symbol function_parameters) [28253 28258])
                    ("sharex" variable nil (reparse-symbol function_parameters) [28262 28268])
                    ("sharey" variable nil (reparse-symbol function_parameters) [28276 28282])
                    ("squeeze" variable nil (reparse-symbol function_parameters) [28290 28297])
                    ("subplot_kw" variable nil (reparse-symbol function_parameters) [28320 28330])
                    ("fig_kw" variable nil (reparse-symbol function_parameters) [28337 28345]))                  )
                nil [28231 35781])
            ("subplot2grid" function
               (:documentation "
    Create a subplot in a grid.  The grid is specified by *shape*, at
    location of *loc*, spanning *rowspan*, *colspan* cells in each
    direction.  The index for loc is 0-based. ::

      subplot2grid(shape, loc, rowspan=1, colspan=1)

    is identical to ::

      gridspec=GridSpec(shape[0], shape[2])
      subplotspec=gridspec.new_subplotspec(loc, rowspan, colspan)
      subplot(subplotspec)
    "
                :arguments 
                  ( ("shape" variable nil (reparse-symbol function_parameters) [35800 35805])
                    ("loc" variable nil (reparse-symbol function_parameters) [35807 35810])
                    ("rowspan" variable nil (reparse-symbol function_parameters) [35812 35819])
                    ("colspan" variable nil (reparse-symbol function_parameters) [35823 35830])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [35834 35842]))                  )
                nil [35783 36780])
            ("twinx" function
               (:documentation "
    Make a second axes that shares the *x*-axis.  The new axes will
    overlay *ax* (or the current axes if *ax* is *None*).  The ticks
    for *ax2* will be placed on the right, and the *ax2* instance is
    returned.

    .. seealso::

       :file:`examples/api_examples/two_scales.py`
          For an example
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [36792 36794]))                  )
                nil [36782 37231])
            ("twiny" function
               (:documentation "
    Make a second axes that shares the *y*-axis.  The new axis will
    overlay *ax* (or the current axes if *ax* is *None*).  The ticks
    for *ax2* will be placed on the top, and the *ax2* instance is
    returned.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [37243 37245]))                  )
                nil [37233 37585])
            ("subplots_adjust" function
               (:documentation "
    Tune the subplot layout.

    call signature::

      subplots_adjust(left=None, bottom=None, right=None, top=None,
                      wspace=None, hspace=None)

    The parameter meanings (and suggested defaults) are::

      left  = 0.125  # the left side of the subplots of the figure
      right = 0.9    # the right side of the subplots of the figure
      bottom = 0.1   # the bottom of the subplots of the figure
      top = 0.9      # the top of the subplots of the figure
      wspace = 0.2   # the amount of width reserved for blank space between subplots
      hspace = 0.2   # the amount of height reserved for white space between subplots

    The actual defaults are controlled by the rc file
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [37607 37612])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [37614 37622]))                  )
                nil [37587 38438])
            ("subplot_tool" function
               (:documentation "
    Launch a subplot tool window for a figure.

    A :class:`matplotlib.widgets.SubplotTool` instance is returned.
    "
                :arguments 
                  ( ("targetfig" variable nil (reparse-symbol function_parameters) [38457 38466]))                  )
                nil [38440 39303])
            ("tight_layout" function
               (:documentation "
    Automatically adjust subplot parameters to give specified padding.

    Parameters:

    pad : float
        padding between the figure edge and the edges of subplots, as a fraction of the font-size.
    h_pad, w_pad : float
        padding (height/width) between edges of adjacent subplots.
        Defaults to `pad_inches`.
    rect : if rect is given, it is interpreted as a rectangle
        (left, bottom, right, top) in the normalized figure
        coordinate that the whole subplots area (including
        labels) will fit into. Default is (0, 0, 1, 1).
    "
                :arguments 
                  ( ("pad" variable nil (reparse-symbol function_parameters) [39322 39325])
                    ("h_pad" variable nil (reparse-symbol function_parameters) [39332 39337])
                    ("w_pad" variable nil (reparse-symbol function_parameters) [39344 39349])
                    ("rect" variable nil (reparse-symbol function_parameters) [39356 39360]))                  )
                nil [39305 40061])
            ("box" function
               (:documentation "
    Turn the axes box on or off.  *on* may be a boolean or a string,
    'on' or 'off'.

    If *on* is *None*, toggle state.
    "
                :arguments 
                  ( ("on" variable nil (reparse-symbol function_parameters) [40071 40073]))                  )
                nil [40063 40371])
            ("title" function
               (:documentation "
    Set a title of the current axes.

    Set one of the three available axes titles. The available titles are
    positioned above the axes in the center, flush with the left edge,
    and flush with the right edge.

    Parameters
    ----------
    label : str
        Text to use for the title
    fontdict : dict
        A dictionary controlling the appearance of the title text,
        the default `fontdict` is:
        {'fontsize': rcParams['axes.titlesize'],
         'verticalalignment': 'baseline',
         'horizontalalignment': loc}
    loc : {'center', 'left', 'right'}, str, optional
        Which title to set, defaults to 'center'

    Returns
    -------
    text : :class:`~matplotlib.text.Text`
        The matplotlib text instance representing the title

    Other parameters
    ----------------
    Other keyword arguments are text properties, see
    :class:`~matplotlib.text.Text` for a list of valid text
    properties.

    See also
    --------
    See :func:`~matplotlib.pyplot.text` for adding text to the current axes

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [40383 40384])
                    ("args" variable nil (reparse-symbol function_parameters) [40386 40391])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [40393 40401]))                  )
                nil [40373 41557])
            ("axis" function
               (:documentation "
    Convenience method to get or set axis properties.

    Calling with no arguments::

      >>> axis()

    returns the current axes limits ``[xmin, xmax, ymin, ymax]``.::

      >>> axis(v)

    sets the min and max of the x and y axes, with
    ``v = [xmin, xmax, ymin, ymax]``.::

      >>> axis('off')

    turns off the axis lines and labels.::

      >>> axis('equal')

    changes limits of *x* or *y* axis so that equal increments of *x*
    and *y* have the same length; a circle is circular.::

      >>> axis('scaled')

    achieves the same result by changing the dimensions of the plot box instead
    of the axis data limits.::

      >>> axis('tight')

    changes *x* and *y* axis limits such that all data is shown. If
    all data is already shown, it will move it to the center of the
    figure without modifying (*xmax* - *xmin*) or (*ymax* -
    *ymin*). Note this is slightly different than in MATLAB.::

      >>> axis('image')

    is 'scaled' with the axis limits equal to the data limits.::

      >>> axis('auto')

    and::

      >>> axis('normal')

    are deprecated. They restore default behavior; axis limits are automatically
    scaled to make the data fit comfortably within the plot box.

    if ``len(*v)==0``, you can pass in *xmin*, *xmax*, *ymin*, *ymax*
    as kwargs selectively to alter just those limits without changing
    the others.

    The xmin, xmax, ymin, ymax tuple is returned

    .. seealso::

        :func:`xlim`, :func:`ylim`
           For setting the x- and y-limits individually.
    "
                :arguments 
                  ( ("v" variable nil (reparse-symbol function_parameters) [41580 41582])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [41584 41592]))                  )
                nil [41571 43241])
            ("xlabel" function
               (:documentation "
    Set the *x* axis label of the current axis.

    Default override is::

      override = {
          'fontsize'            : 'small',
          'verticalalignment'   : 'top',
          'horizontalalignment' : 'center'
          }

    .. seealso::

        :func:`~matplotlib.pyplot.text`
            For information on how override and the optional args work
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43254 43255])
                    ("args" variable nil (reparse-symbol function_parameters) [43257 43262])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [43264 43272]))                  )
                nil [43243 43740])
            ("ylabel" function
               (:documentation "
    Set the *y* axis label of the current axis.

    Defaults override is::

        override = {
           'fontsize'            : 'small',
           'verticalalignment'   : 'center',
           'horizontalalignment' : 'right',
           'rotation'='vertical' : }

    .. seealso::

        :func:`~matplotlib.pyplot.text`
            For information on how override and the optional args
            work.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43753 43754])
                    ("args" variable nil (reparse-symbol function_parameters) [43756 43761])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [43763 43771]))                  )
                nil [43742 44285])
            ("xlim" function
               (:documentation "
    Get or set the *x* limits of the current axes.

    ::

      xmin, xmax = xlim()   # return the current xlim
      xlim( (xmin, xmax) )  # set the xlim to xmin, xmax
      xlim( xmin, xmax )    # set the xlim to xmin, xmax

    If you do not specify args, you can pass the xmin and xmax as
    kwargs, e.g.::

      xlim(xmax=3) # adjust the max leaving min unchanged
      xlim(xmin=1) # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the x-axis.

    The new axis limits are returned as a length 2 tuple.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [44296 44301])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [44303 44311]))                  )
                nil [44287 45035])
            ("ylim" function
               (:documentation "
    Get or set the *y*-limits of the current axes.

    ::

      ymin, ymax = ylim()   # return the current ylim
      ylim( (ymin, ymax) )  # set the ylim to ymin, ymax
      ylim( ymin, ymax )    # set the ylim to ymin, ymax

    If you do not specify args, you can pass the *ymin* and *ymax* as
    kwargs, e.g.::

      ylim(ymax=3) # adjust the max leaving min unchanged
      ylim(ymin=1) # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the y-axis.

    The new axis limits are returned as a length 2 tuple.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [45046 45051])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [45053 45061]))                  )
                nil [45037 45788])
            ("xscale" function
               (:documentation "
    Set the scaling of the *x*-axis.

    call signature::

      xscale(scale, **kwargs)

    The available scales are: %(scale)s

    Different keywords may be accepted, depending on the scale:

    %(scale_docs)s
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [45827 45832])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [45834 45842]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [45790 46153])
            ("yscale" function
               (:documentation "
    Set the scaling of the *y*-axis.

    call signature::

      yscale(scale, **kwargs)

    The available scales are: %(scale)s

    Different keywords may be accepted, depending on the scale:

    %(scale_docs)s
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [46192 46197])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [46199 46207]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [46155 46518])
            ("xticks" function
               (:documentation "
    Get or set the *x*-limits of the current tick locations and labels.

    ::

      # return locs, labels where locs is an array of tick locations and
      # labels is an array of tick labels.
      locs, labels = xticks()

      # set the locations of the xticks
      xticks( arange(6) )

      # set the locations and labels of the xticks
      xticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )

    The keyword args, if any, are :class:`~matplotlib.text.Text`
    properties. For example, to rotate long labels::

      xticks( arange(12), calendar.month_name[1:13], rotation=17 )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [46531 46536])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [46538 46546]))                  )
                nil [46520 47711])
            ("yticks" function
               (:documentation "
    Get or set the *y*-limits of the current tick locations and labels.

    ::

      # return locs, labels where locs is an array of tick locations and
      # labels is an array of tick labels.
      locs, labels = yticks()

      # set the locations of the yticks
      yticks( arange(6) )

      # set the locations and labels of the yticks
      yticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )

    The keyword args, if any, are :class:`~matplotlib.text.Text`
    properties. For example, to rotate long labels::

      yticks( arange(12), calendar.month_name[1:13], rotation=45 )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [47724 47729])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [47731 47739]))                  )
                nil [47713 48935])
            ("minorticks_on" function (:documentation "
    Display minor ticks on the current plot.

    Displaying minor ticks reduces performance; turn them off using
    minorticks_off() if drawing speed is a problem.
    ") nil [48937 49192])
            ("minorticks_off" function (:documentation "
    Remove minor ticks from the current plot.
    ") nil [49194 49331])
            ("rgrids" function
               (:documentation "
    Get or set the radial gridlines on a polar plot.

    call signatures::

      lines, labels = rgrids()
      lines, labels = rgrids(radii, labels=None, angle=22.5, **kwargs)

    When called with no arguments, :func:`rgrid` simply returns the
    tuple (*lines*, *labels*), where *lines* is an array of radial
    gridlines (:class:`~matplotlib.lines.Line2D` instances) and
    *labels* is an array of tick labels
    (:class:`~matplotlib.text.Text` instances). When called with
    arguments, the labels will appear at the specified radial
    distances and angles.

    *labels*, if not *None*, is a len(*radii*) list of strings of the
    labels to use at each angle.

    If *labels* is None, the rformatter will be used

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0) )

      # set the locations and labels of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0), ('Tom', 'Dick', 'Harry' )

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [49344 49349])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [49351 49359]))                  )
                nil [49333 50805])
            ("thetagrids" function
               (:documentation "
    Get or set the theta locations of the gridlines in a polar plot.

    If no arguments are passed, return a tuple (*lines*, *labels*)
    where *lines* is an array of radial gridlines
    (:class:`~matplotlib.lines.Line2D` instances) and *labels* is an
    array of tick labels (:class:`~matplotlib.text.Text` instances)::

      lines, labels = thetagrids()

    Otherwise the syntax is::

      lines, labels = thetagrids(angles, labels=None, fmt='%d', frac = 1.1)

    set the angles at which to place the theta grids (these gridlines
    are equal along the theta dimension).

    *angles* is in degrees.

    *labels*, if not *None*, is a len(angles) list of strings of the
    labels to use at each angle.

    If *labels* is *None*, the labels will be ``fmt%angle``.

    *frac* is the fraction of the polar axes radius at which to place
    the label (1 is the edge). e.g., 1.05 is outside the axes and 0.95
    is inside the axes.

    Return value is a list of tuples (*lines*, *labels*):

      - *lines* are :class:`~matplotlib.lines.Line2D` instances

      - *labels* are :class:`~matplotlib.text.Text` instances.

    Note that on input, the *labels* argument is a list of strings,
    and on output it is a list of :class:`~matplotlib.text.Text`
    instances.

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90) )

      # set the locations and labels of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90), ('NE', 'NW', 'SW','SE') )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [50822 50827])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [50829 50837]))                  )
                nil [50807 52862])
            ("plotting" function nil nil [52885 52910])
            ("get_plot_commands" function (:documentation "
    Get a sorted list of all of the plotting commands.
    ") nil [52912 53862])
            ("colors" function (:documentation "
    This is a do-nothing function to provide you with help on how
    matplotlib handles colors.

    Commands which take color arguments can use several formats to
    specify the colors.  For the basic built-in colors, you can use a
    single letter

      =====   =======
      Alias   Color
      =====   =======
      'b'     blue
      'g'     green
      'r'     red
      'c'     cyan
      'm'     magenta
      'y'     yellow
      'k'     black
      'w'     white
      =====   =======

    For a greater range of colors, you have two options.  You can
    specify the color using an html hex string, as in::

      color = '#eeefff'

    or you can pass an R,G,B tuple, where each of R,G,B are in the
    range [0,1].

    You can also use any legal html name for a color, for example::

      color = 'red'
      color = 'burlywood'
      color = 'chartreuse'

    The example below creates a subplot with a dark
    slate gray background::

       subplot(111, axisbg=(0.1843, 0.3098, 0.3098))

    Here is an example that creates a pale turquoise title::

      title('Is this the best color?', color='#afeeee')

    ") nil [53863 55032])
            ("colormaps" function (:documentation "
    Matplotlib provides a number of colormaps, and others can be added using
    :func:`~matplotlib.cm.register_cmap`.  This function documents the built-in
    colormaps, and will also return a list of all registered colormaps if called.

    You can set the colormap for an image, pcolor, scatter, etc,
    using a keyword argument::

      imshow(X, cmap=cm.hot)

    or using the :func:`set_cmap` function::

      imshow(X)
      pyplot.set_cmap('hot')
      pyplot.set_cmap('jet')

    In interactive mode, :func:`set_cmap` will update the colormap post-hoc,
    allowing you to see which one works best for your data.

    All built-in colormaps can be reversed by appending ``_r``: For instance,
    ``gray_r`` is the reverse of ``gray``.

    There are several common color schemes used in visualization:

    Sequential schemes
      for unipolar data that progresses from low to high
    Diverging schemes
      for bipolar data that emphasizes positive or negative deviations from a
      central value
    Cyclic schemes
      meant for plotting values that wrap around at the
      endpoints, such as phase angle, wind direction, or time of day
    Qualitative schemes
      for nominal data that has no inherent ordering, where color is used
      only to distinguish categories

    The base colormaps are derived from those of the same name provided
    with Matlab:

      =========   =======================================================
      Colormap    Description
      =========   =======================================================
      autumn      sequential linearly-increasing shades of red-orange-yellow
      bone        sequential increasing black-white color map with
                  a tinge of blue, to emulate X-ray film
      cool        linearly-decreasing shades of cyan-magenta
      copper      sequential increasing shades of black-copper
      flag        repetitive red-white-blue-black pattern (not cyclic at
                  endpoints)
      gray        sequential linearly-increasing black-to-white
                  grayscale
      hot         sequential black-red-yellow-white, to emulate blackbody
                  radiation from an object at increasing temperatures
      hsv         cyclic red-yellow-green-cyan-blue-magenta-red, formed
                  by changing the hue component in the HSV color space
      jet         a spectral map with dark endpoints, blue-cyan-yellow-red;
                  based on a fluid-jet simulation by NCSA [#]_
      pink        sequential increasing pastel black-pink-white, meant
                  for sepia tone colorization of photographs
      prism       repetitive red-yellow-green-blue-purple-...-green pattern
                  (not cyclic at endpoints)
      spring      linearly-increasing shades of magenta-yellow
      summer      sequential linearly-increasing shades of green-yellow
      winter      linearly-increasing shades of blue-green
      =========   =======================================================

    For the above list only, you can also set the colormap using the
    corresponding pylab shortcut interface function, similar to Matlab::

      imshow(X)
      hot()
      jet()

    The next set of palettes are from the `Yorick scientific visualisation
    package <http://yorick.sourceforge.net/index.php>`_, an evolution of
    the GIST package, both by David H. Munro:

      ============  =======================================================
      Colormap      Description
      ============  =======================================================
      gist_earth    mapmaker's colors from dark blue deep ocean to green
                    lowlands to brown highlands to white mountains
      gist_heat     sequential increasing black-red-orange-white, to emulate
                    blackbody radiation from an iron bar as it grows hotter
      gist_ncar     pseudo-spectral black-blue-green-yellow-red-purple-white
                    colormap from National Center for Atmospheric
                    Research [#]_
      gist_rainbow  runs through the colors in spectral order from red to
                    violet at full saturation (like *hsv* but not cyclic)
      gist_stern    \"Stern special\" color table from Interactive Data
                    Language software
      ============  =======================================================

    The following colormaps are based on the `ColorBrewer
    <http://colorbrewer.org>`_ color specifications and designs developed by
    Cynthia Brewer:

    ColorBrewer Diverging (luminance is highest at the midpoint, and
    decreases towards differently-colored endpoints):

      ========  ===================================
      Colormap  Description
      ========  ===================================
      BrBG      brown, white, blue-green
      PiYG      pink, white, yellow-green
      PRGn      purple, white, green
      PuOr      orange, white, purple
      RdBu      red, white, blue
      RdGy      red, white, gray
      RdYlBu    red, yellow, blue
      RdYlGn    red, yellow, green
      Spectral  red, orange, yellow, green, blue
      ========  ===================================

    ColorBrewer Sequential (luminance decreases monotonically):

      ========  ====================================
      Colormap  Description
      ========  ====================================
      Blues     white to dark blue
      BuGn      white, light blue, dark green
      BuPu      white, light blue, dark purple
      GnBu      white, light green, dark blue
      Greens    white to dark green
      Greys     white to black (not linear)
      Oranges   white, orange, dark brown
      OrRd      white, orange, dark red
      PuBu      white, light purple, dark blue
      PuBuGn    white, light purple, dark green
      PuRd      white, light purple, dark red
      Purples   white to dark purple
      RdPu      white, pink, dark purple
      Reds      white to dark red
      YlGn      light yellow, dark green
      YlGnBu    light yellow, light green, dark blue
      YlOrBr    light yellow, orange, dark brown
      YlOrRd    light yellow, orange, dark red
      ========  ====================================

    ColorBrewer Qualitative:

    (For plotting nominal data, :class:`ListedColormap` should be used,
    not :class:`LinearSegmentedColormap`.  Different sets of colors are
    recommended for different numbers of categories.  These continuous
    versions of the qualitative schemes may be removed or converted in the
    future.)

    * Accent
    * Dark2
    * Paired
    * Pastel1
    * Pastel2
    * Set1
    * Set2
    * Set3

    Other miscellaneous schemes:

      ============= =======================================================
      Colormap      Description
      ============= =======================================================
      afmhot        sequential black-orange-yellow-white blackbody
                    spectrum, commonly used in atomic force microscopy
      brg           blue-red-green
      bwr           diverging blue-white-red
      coolwarm      diverging blue-gray-red, meant to avoid issues with 3D
                    shading, color blindness, and ordering of colors [#]_
      CMRmap        \"Default colormaps on color images often reproduce to
                    confusing grayscale images. The proposed colormap
                    maintains an aesthetically pleasing color image that
                    automatically reproduces to a monotonic grayscale with
                    discrete, quantifiable saturation levels.\" [#]_
      cubehelix     Unlike most other color schemes cubehelix was designed
                    by D.A. Green to be monotonically increasing in terms
                    of perceived brightness. Also, when printed on a black
                    and white postscript printer, the scheme results in a
                    greyscale with monotonically increasing brightness.
                    This color scheme is named cubehelix because the r,g,b
                    values produced can be visualised as a squashed helix
                    around the diagonal in the r,g,b color cube.
      gnuplot       gnuplot's traditional pm3d scheme
                    (black-blue-red-yellow)
      gnuplot2      sequential color printable as gray
                    (black-blue-violet-yellow-white)
      ocean         green-blue-white
      rainbow       spectral purple-blue-green-yellow-orange-red colormap
                    with diverging luminance
      seismic       diverging blue-white-red
      nipy_spectral black-purple-blue-green-yellow-red-white spectrum,
                    originally from the Neuroimaging in Python project
      terrain       mapmaker's colors, blue-green-yellow-brown-white,
                    originally from IGOR Pro
      ============= =======================================================

    The following colormaps are redundant and may be removed in future
    versions.  It's recommended to use the names in the descriptions
    instead, which produce identical output:

      =========  =======================================================
      Colormap   Description
      =========  =======================================================
      gist_gray  identical to *gray*
      gist_yarg  identical to *gray_r*
      binary     identical to *gray_r*
      spectral   identical to *nipy_spectral* [#]_
      =========  =======================================================

    .. rubric:: Footnotes

    .. [#] Rainbow colormaps, ``jet`` in particular, are considered a poor
      choice for scientific visualization by many researchers: `Rainbow Color
      Map (Still) Considered Harmful
      <http://www.jwave.vt.edu/%7Erkriz/Projects/create_color_table/color_07.pdf>`_

    .. [#] Resembles \"BkBlAqGrYeOrReViWh200\" from NCAR Command
      Language. See `Color Table Gallery
      <http://www.ncl.ucar.edu/Document/Graphics/color_table_gallery.shtml>`_

    .. [#] See `Diverging Color Maps for Scientific Visualization
      <http://www.cs.unm.edu/~kmorel/documents/ColorMaps/>`_ by Kenneth
      Moreland.

    .. [#] See `A Color Map for Effective Black-and-White Rendering of
      Color-Scale Images
      <http://www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m>`_
      by Carey Rappaport

    .. [#] Changed to distinguish from ColorBrewer's *Spectral* map.
      :func:`spectral` still works, but
      ``set_cmap('nipy_spectral')`` is recommended for clarity.


    ") nil [55034 65655])
            ("_setup_pyplot_info_docstrings" function (:documentation "
    Generates the plotting and docstring.

    These must be done after the entire module is imported, so it is
    called from the end of this module, which is generated by
    boilerplate.py.
    ") nil [65657 67216])
            ("colorbar" function (:arguments 
              ( ("mappable" variable nil (reparse-symbol function_parameters) [67296 67304])
                ("cax" variable nil (reparse-symbol function_parameters) [67311 67314])
                ("ax" variable nil (reparse-symbol function_parameters) [67321 67323])
                ("kw" variable nil (reparse-symbol function_parameters) [67330 67334]))              ) nil [67283 67832])
            ("colorbar" variable nil nil [67832 67883])
            ("clim" function
               (:documentation "
    Set the color limits of the current image.

    To apply clim to all axes images do::

      clim(0, 0.5)

    If either *vmin* or *vmax* is None, the image min/max respectively
    will be used for color scaling.

    If you want to set the clim of multiple images,
    use, for example::

      for im in gca().get_images():
          im.set_clim(0, 0.05)

    "
                :arguments 
                  ( ("vmin" variable nil (reparse-symbol function_parameters) [67895 67899])
                    ("vmax" variable nil (reparse-symbol function_parameters) [67906 67910]))                  )
                nil [67886 68463])
            ("set_cmap" function
               (:documentation "
    Set the default colormap.  Applies to the current image if any.
    See help(colormaps) for more information.

    *cmap* must be a :class:`~matplotlib.colors.Colormap` instance, or
    the name of a registered colormap.

    See :func:`matplotlib.cm.register_cmap` and
    :func:`matplotlib.cm.get_cmap`.
    "
                :arguments 
                  ( ("cmap" variable nil (reparse-symbol function_parameters) [68478 68482]))                  )
                nil [68465 68965])
            ("" code nil nil [68989 68998])
            ("imread" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [69010 69015])
                ("kwargs" variable nil (reparse-symbol function_parameters) [69017 69025]))              ) nil [68999 69064])
            ("" code nil nil [69088 69097])
            ("imsave" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [69109 69114])
                ("kwargs" variable nil (reparse-symbol function_parameters) [69116 69124]))              ) nil [69098 69163])
            ("matshow" function
               (:documentation "
    Display an array as a matrix in a new figure window.

    The origin is set at the upper left hand corner and rows (first
    dimension of the array) are displayed horizontally.  The aspect
    ratio of the figure window is that of the array, unless this would
    make an excessively short or narrow figure.

    Tick labels for the xaxis are placed on top.

    With the exception of *fignum*, keyword arguments are passed to
    :func:`~matplotlib.pyplot.imshow`.  You may set the *origin*
    kwarg to \"lower\" if you want the first row in the array to be
    at the bottom instead of the top.


    *fignum*: [ None | integer | False ]
      By default, :func:`matshow` creates a new figure window with
      automatic numbering.  If *fignum* is given as an integer, the
      created figure will use this figure number.  Because of how
      :func:`matshow` tries to set the figure aspect ratio to be the
      one of the array, if you provide the number of an already
      existing figure, strange things may happen.

      If *fignum* is *False* or 0, a new figure window will **NOT** be created.
    "
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [69177 69178])
                    ("fignum" variable nil (reparse-symbol function_parameters) [69180 69186])
                    ("kw" variable nil (reparse-symbol function_parameters) [69193 69197]))                  )
                nil [69165 70690])
            ("polar" function
               (:documentation "
    Make a polar plot.

    call signature::

      polar(theta, r, **kwargs)

    Multiple *theta*, *r* arguments are supported, with format
    strings, as in :func:`~matplotlib.pyplot.plot`.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [70702 70707])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [70709 70717]))                  )
                nil [70692 71032])
            ("plotfile" function
               (:documentation "
    Plot the data in in a file.

    *cols* is a sequence of column identifiers to plot.  An identifier
    is either an int or a string.  If it is an int, it indicates the
    column number.  If it is a string, it indicates the column header.
    matplotlib will make column headers lower case, replace spaces with
    underscores, and remove all illegal characters; so ``'Adj Close*'``
    will have name ``'adj_close'``.

    - If len(*cols*) == 1, only that column will be plotted on the *y* axis.

    - If len(*cols*) > 1, the first element will be an identifier for
      data for the *x* axis and the remaining elements will be the
      column indexes for multiple subplots if *subplots* is *True*
      (the default), or for lines in a single subplot if *subplots*
      is *False*.

    *plotfuncs*, if not *None*, is a dictionary mapping identifier to
    an :class:`~matplotlib.axes.Axes` plotting function as a string.
    Default is 'plot', other choices are 'semilogy', 'fill', 'bar',
    etc.  You must use the same type of identifier in the *cols*
    vector as you use in the *plotfuncs* dictionary, e.g., integer
    column numbers in both or column names in both. If *subplots*
    is *False*, then including any function such as 'semilogy'
    that changes the axis scaling will set the scaling for all
    columns.

    *comments*, *skiprows*, *checkrows*, *delimiter*, and *names*
    are all passed on to :func:`matplotlib.pylab.csv2rec` to
    load the data into a record array.

    If *newfig* is *True*, the plot always will be made in a new figure;
    if *False*, it will be made in the current figure if one exists,
    else in a new figure.

    kwargs are passed on to plotting functions.

    Example usage::

      # plot the 2nd and 4th column against the 1st in two subplots
      plotfile(fname, (0,1,3))

      # plot using column names; specify an alternate plot type for volume
      plotfile(fname, ('date', 'volume', 'adj_close'),
                                    plotfuncs={'volume': 'semilogy'})

    Note: plotfile is intended as a convenience for quickly plotting
    data from flat files; it is not intended as an alternative
    interface to general plotting with pyplot or matplotlib.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [71047 71052])
                    ("cols" variable nil (reparse-symbol function_parameters) [71054 71058])
                    ("plotfuncs" variable nil (reparse-symbol function_parameters) [71065 71074])
                    ("comments" variable nil (reparse-symbol function_parameters) [71094 71102])
                    ("skiprows" variable nil (reparse-symbol function_parameters) [71108 71116])
                    ("checkrows" variable nil (reparse-symbol function_parameters) [71120 71129])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [71133 71142])
                    ("names" variable nil (reparse-symbol function_parameters) [71148 71153])
                    ("subplots" variable nil (reparse-symbol function_parameters) [71173 71181])
                    ("newfig" variable nil (reparse-symbol function_parameters) [71188 71194])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [71201 71209]))                  )
                nil [71034 75311])
            ("_autogen_docstring" function
               (:documentation "Autogenerated wrappers will get their docstring from a base function
    with an addendum."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [75336 75340]))                  )
                nil [75313 75643])
            ("" code nil nil [75761 75771])
            ("spy" function (:arguments 
              ( ("Z" variable nil (reparse-symbol function_parameters) [75780 75781])
                ("precision" variable nil (reparse-symbol function_parameters) [75783 75792])
                ("marker" variable nil (reparse-symbol function_parameters) [75796 75802])
                ("markersize" variable nil (reparse-symbol function_parameters) [75809 75819])
                ("aspect" variable nil (reparse-symbol function_parameters) [75826 75832])
                ("hold" variable nil (reparse-symbol function_parameters) [75842 75846])
                ("kwargs" variable nil (reparse-symbol function_parameters) [75853 75861]))              ) nil [75772 76252])
            ("" code nil nil [76446 76458])
            ("acorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [76469 76470])
                ("hold" variable nil (reparse-symbol function_parameters) [76472 76476])
                ("kwargs" variable nil (reparse-symbol function_parameters) [76483 76491]))              ) nil [76459 76786])
            ("" code nil nil [76898 76910])
            ("arrow" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [76921 76922])
                ("y" variable nil (reparse-symbol function_parameters) [76924 76925])
                ("dx" variable nil (reparse-symbol function_parameters) [76927 76929])
                ("dy" variable nil (reparse-symbol function_parameters) [76931 76933])
                ("hold" variable nil (reparse-symbol function_parameters) [76935 76939])
                ("kwargs" variable nil (reparse-symbol function_parameters) [76946 76954]))              ) nil [76911 77260])
            ("" code nil nil [77372 77386])
            ("axhline" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [77399 77400])
                ("xmin" variable nil (reparse-symbol function_parameters) [77404 77408])
                ("xmax" variable nil (reparse-symbol function_parameters) [77412 77416])
                ("hold" variable nil (reparse-symbol function_parameters) [77420 77424])
                ("kwargs" variable nil (reparse-symbol function_parameters) [77431 77439]))              ) nil [77387 77760])
            ("" code nil nil [77872 77886])
            ("axhspan" function (:arguments 
              ( ("ymin" variable nil (reparse-symbol function_parameters) [77899 77903])
                ("ymax" variable nil (reparse-symbol function_parameters) [77905 77909])
                ("xmin" variable nil (reparse-symbol function_parameters) [77911 77915])
                ("xmax" variable nil (reparse-symbol function_parameters) [77919 77923])
                ("hold" variable nil (reparse-symbol function_parameters) [77927 77931])
                ("kwargs" variable nil (reparse-symbol function_parameters) [77938 77946]))              ) nil [77887 78274])
            ("" code nil nil [78386 78400])
            ("axvline" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [78413 78414])
                ("ymin" variable nil (reparse-symbol function_parameters) [78418 78422])
                ("ymax" variable nil (reparse-symbol function_parameters) [78426 78430])
                ("hold" variable nil (reparse-symbol function_parameters) [78434 78438])
                ("kwargs" variable nil (reparse-symbol function_parameters) [78445 78453]))              ) nil [78401 78774])
            ("" code nil nil [78886 78900])
            ("axvspan" function (:arguments 
              ( ("xmin" variable nil (reparse-symbol function_parameters) [78913 78917])
                ("xmax" variable nil (reparse-symbol function_parameters) [78919 78923])
                ("ymin" variable nil (reparse-symbol function_parameters) [78925 78929])
                ("ymax" variable nil (reparse-symbol function_parameters) [78933 78937])
                ("hold" variable nil (reparse-symbol function_parameters) [78941 78945])
                ("kwargs" variable nil (reparse-symbol function_parameters) [78952 78960]))              ) nil [78901 79288])
            ("" code nil nil [79400 79410])
            ("bar" function (:arguments 
              ( ("left" variable nil (reparse-symbol function_parameters) [79419 79423])
                ("height" variable nil (reparse-symbol function_parameters) [79425 79431])
                ("width" variable nil (reparse-symbol function_parameters) [79433 79438])
                ("bottom" variable nil (reparse-symbol function_parameters) [79444 79450])
                ("hold" variable nil (reparse-symbol function_parameters) [79457 79461])
                ("kwargs" variable nil (reparse-symbol function_parameters) [79468 79476]))              ) nil [79411 79808])
            ("" code nil nil [79920 79931])
            ("barh" function (:arguments 
              ( ("bottom" variable nil (reparse-symbol function_parameters) [79941 79947])
                ("width" variable nil (reparse-symbol function_parameters) [79949 79954])
                ("height" variable nil (reparse-symbol function_parameters) [79956 79962])
                ("left" variable nil (reparse-symbol function_parameters) [79968 79972])
                ("hold" variable nil (reparse-symbol function_parameters) [79979 79983])
                ("kwargs" variable nil (reparse-symbol function_parameters) [79990 79998]))              ) nil [79932 80330])
            ("" code nil nil [80442 80460])
            ("broken_barh" function (:arguments 
              ( ("xranges" variable nil (reparse-symbol function_parameters) [80477 80484])
                ("yrange" variable nil (reparse-symbol function_parameters) [80486 80492])
                ("hold" variable nil (reparse-symbol function_parameters) [80494 80498])
                ("kwargs" variable nil (reparse-symbol function_parameters) [80505 80513]))              ) nil [80461 80828])
            ("" code nil nil [80940 80954])
            ("boxplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [80967 80968])
                ("notch" variable nil (reparse-symbol function_parameters) [80970 80975])
                ("sym" variable nil (reparse-symbol function_parameters) [80983 80986])
                ("vert" variable nil (reparse-symbol function_parameters) [80993 80997])
                ("whis" variable nil (reparse-symbol function_parameters) [81004 81008])
                ("positions" variable nil (reparse-symbol function_parameters) [81014 81023])
                ("widths" variable nil (reparse-symbol function_parameters) [81042 81048])
                ("patch_artist" variable nil (reparse-symbol function_parameters) [81055 81067])
                ("bootstrap" variable nil (reparse-symbol function_parameters) [81075 81084])
                ("usermedians" variable nil (reparse-symbol function_parameters) [81091 81102])
                ("conf_intervals" variable nil (reparse-symbol function_parameters) [81121 81135])
                ("hold" variable nil (reparse-symbol function_parameters) [81142 81146]))              ) nil [80955 81697])
            ("" code nil nil [81809 81822])
            ("cohere" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [81834 81835])
                ("y" variable nil (reparse-symbol function_parameters) [81837 81838])
                ("NFFT" variable nil (reparse-symbol function_parameters) [81840 81844])
                ("Fs" variable nil (reparse-symbol function_parameters) [81850 81852])
                ("Fc" variable nil (reparse-symbol function_parameters) [81856 81858])
                ("detrend" variable nil (reparse-symbol function_parameters) [81862 81869])
                ("window" variable nil (reparse-symbol function_parameters) [81900 81906])
                ("noverlap" variable nil (reparse-symbol function_parameters) [81928 81936])
                ("pad_to" variable nil (reparse-symbol function_parameters) [81940 81946])
                ("sides" variable nil (reparse-symbol function_parameters) [81953 81958])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [81981 81994])
                ("hold" variable nil (reparse-symbol function_parameters) [82001 82005])
                ("kwargs" variable nil (reparse-symbol function_parameters) [82012 82020]))              ) nil [81823 82500])
            ("" code nil nil [82612 82625])
            ("clabel" function (:arguments 
              ( ("CS" variable nil (reparse-symbol function_parameters) [82637 82639])
                ("args" variable nil (reparse-symbol function_parameters) [82641 82646])
                ("kwargs" variable nil (reparse-symbol function_parameters) [82648 82656]))              ) nil [82626 82995])
            ("" code nil nil [83107 83121])
            ("contour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [83134 83139])
                ("kwargs" variable nil (reparse-symbol function_parameters) [83141 83149]))              ) nil [83122 83520])
            ("" code nil nil [83632 83647])
            ("contourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [83661 83666])
                ("kwargs" variable nil (reparse-symbol function_parameters) [83668 83676]))              ) nil [83648 84048])
            ("" code nil nil [84160 84170])
            ("csd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [84179 84180])
                ("y" variable nil (reparse-symbol function_parameters) [84182 84183])
                ("NFFT" variable nil (reparse-symbol function_parameters) [84185 84189])
                ("Fs" variable nil (reparse-symbol function_parameters) [84195 84197])
                ("Fc" variable nil (reparse-symbol function_parameters) [84201 84203])
                ("detrend" variable nil (reparse-symbol function_parameters) [84207 84214])
                ("window" variable nil (reparse-symbol function_parameters) [84242 84248])
                ("noverlap" variable nil (reparse-symbol function_parameters) [84270 84278])
                ("pad_to" variable nil (reparse-symbol function_parameters) [84282 84288])
                ("sides" variable nil (reparse-symbol function_parameters) [84295 84300])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [84320 84333])
                ("hold" variable nil (reparse-symbol function_parameters) [84340 84344])
                ("kwargs" variable nil (reparse-symbol function_parameters) [84351 84359]))              ) nil [84171 84830])
            ("" code nil nil [84942 84957])
            ("errorbar" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [84971 84972])
                ("y" variable nil (reparse-symbol function_parameters) [84974 84975])
                ("yerr" variable nil (reparse-symbol function_parameters) [84977 84981])
                ("xerr" variable nil (reparse-symbol function_parameters) [84988 84992])
                ("fmt" variable nil (reparse-symbol function_parameters) [84999 85002])
                ("ecolor" variable nil (reparse-symbol function_parameters) [85008 85014])
                ("elinewidth" variable nil (reparse-symbol function_parameters) [85021 85031])
                ("capsize" variable nil (reparse-symbol function_parameters) [85051 85058])
                ("barsabove" variable nil (reparse-symbol function_parameters) [85062 85071])
                ("lolims" variable nil (reparse-symbol function_parameters) [85079 85085])
                ("uplims" variable nil (reparse-symbol function_parameters) [85093 85099])
                ("xlolims" variable nil (reparse-symbol function_parameters) [85120 85127])
                ("xuplims" variable nil (reparse-symbol function_parameters) [85135 85142])
                ("errorevery" variable nil (reparse-symbol function_parameters) [85150 85160])
                ("capthick" variable nil (reparse-symbol function_parameters) [85164 85172])
                ("hold" variable nil (reparse-symbol function_parameters) [85192 85196])
                ("kwargs" variable nil (reparse-symbol function_parameters) [85203 85211]))              ) nil [84958 85829])
            ("" code nil nil [85941 85957])
            ("eventplot" function (:arguments 
              ( ("positions" variable nil (reparse-symbol function_parameters) [85972 85981])
                ("orientation" variable nil (reparse-symbol function_parameters) [85983 85994])
                ("lineoffsets" variable nil (reparse-symbol function_parameters) [86009 86020])
                ("linelengths" variable nil (reparse-symbol function_parameters) [86024 86035])
                ("linewidths" variable nil (reparse-symbol function_parameters) [86053 86063])
                ("colors" variable nil (reparse-symbol function_parameters) [86070 86076])
                ("linestyles" variable nil (reparse-symbol function_parameters) [86083 86093])
                ("hold" variable nil (reparse-symbol function_parameters) [86103 86107])
                ("kwargs" variable nil (reparse-symbol function_parameters) [86128 86136]))              ) nil [85958 86660])
            ("" code nil nil [86772 86783])
            ("fill" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [86793 86798])
                ("kwargs" variable nil (reparse-symbol function_parameters) [86800 86808]))              ) nil [86784 87141])
            ("" code nil nil [87253 87272])
            ("fill_between" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [87290 87291])
                ("y1" variable nil (reparse-symbol function_parameters) [87293 87295])
                ("y2" variable nil (reparse-symbol function_parameters) [87297 87299])
                ("where" variable nil (reparse-symbol function_parameters) [87303 87308])
                ("interpolate" variable nil (reparse-symbol function_parameters) [87315 87326])
                ("hold" variable nil (reparse-symbol function_parameters) [87334 87338])
                ("kwargs" variable nil (reparse-symbol function_parameters) [87345 87353]))              ) nil [87273 87734])
            ("" code nil nil [87846 87866])
            ("fill_betweenx" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [87885 87886])
                ("x1" variable nil (reparse-symbol function_parameters) [87888 87890])
                ("x2" variable nil (reparse-symbol function_parameters) [87892 87894])
                ("where" variable nil (reparse-symbol function_parameters) [87898 87903])
                ("hold" variable nil (reparse-symbol function_parameters) [87910 87914])
                ("kwargs" variable nil (reparse-symbol function_parameters) [87921 87929]))              ) nil [87867 88256])
            ("" code nil nil [88368 88381])
            ("hexbin" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [88393 88394])
                ("y" variable nil (reparse-symbol function_parameters) [88396 88397])
                ("C" variable nil (reparse-symbol function_parameters) [88399 88400])
                ("gridsize" variable nil (reparse-symbol function_parameters) [88407 88415])
                ("bins" variable nil (reparse-symbol function_parameters) [88421 88425])
                ("xscale" variable nil (reparse-symbol function_parameters) [88432 88438])
                ("yscale" variable nil (reparse-symbol function_parameters) [88460 88466])
                ("extent" variable nil (reparse-symbol function_parameters) [88477 88483])
                ("cmap" variable nil (reparse-symbol function_parameters) [88490 88494])
                ("norm" variable nil (reparse-symbol function_parameters) [88501 88505])
                ("vmin" variable nil (reparse-symbol function_parameters) [88512 88516])
                ("vmax" variable nil (reparse-symbol function_parameters) [88534 88538])
                ("alpha" variable nil (reparse-symbol function_parameters) [88545 88550])
                ("linewidths" variable nil (reparse-symbol function_parameters) [88557 88567])
                ("edgecolors" variable nil (reparse-symbol function_parameters) [88574 88584])
                ("reduce_C_function" variable nil (reparse-symbol function_parameters) [88604 88621])
                ("mincnt" variable nil (reparse-symbol function_parameters) [88631 88637])
                ("marginals" variable nil (reparse-symbol function_parameters) [88644 88653])
                ("hold" variable nil (reparse-symbol function_parameters) [88661 88665])
                ("kwargs" variable nil (reparse-symbol function_parameters) [88683 88691]))              ) nil [88382 89378])
            ("" code nil nil [89490 89501])
            ("hist" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [89511 89512])
                ("bins" variable nil (reparse-symbol function_parameters) [89514 89518])
                ("range" variable nil (reparse-symbol function_parameters) [89523 89528])
                ("normed" variable nil (reparse-symbol function_parameters) [89535 89541])
                ("weights" variable nil (reparse-symbol function_parameters) [89549 89556])
                ("cumulative" variable nil (reparse-symbol function_parameters) [89563 89573])
                ("bottom" variable nil (reparse-symbol function_parameters) [89590 89596])
                ("histtype" variable nil (reparse-symbol function_parameters) [89603 89611])
                ("align" variable nil (reparse-symbol function_parameters) [89619 89624])
                ("orientation" variable nil (reparse-symbol function_parameters) [89632 89643])
                ("rwidth" variable nil (reparse-symbol function_parameters) [89665 89671])
                ("log" variable nil (reparse-symbol function_parameters) [89678 89681])
                ("color" variable nil (reparse-symbol function_parameters) [89689 89694])
                ("label" variable nil (reparse-symbol function_parameters) [89701 89706])
                ("stacked" variable nil (reparse-symbol function_parameters) [89713 89720])
                ("hold" variable nil (reparse-symbol function_parameters) [89737 89741])
                ("kwargs" variable nil (reparse-symbol function_parameters) [89748 89756]))              ) nil [89502 90356])
            ("" code nil nil [90468 90481])
            ("hist2d" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [90493 90494])
                ("y" variable nil (reparse-symbol function_parameters) [90496 90497])
                ("bins" variable nil (reparse-symbol function_parameters) [90499 90503])
                ("range" variable nil (reparse-symbol function_parameters) [90508 90513])
                ("normed" variable nil (reparse-symbol function_parameters) [90520 90526])
                ("weights" variable nil (reparse-symbol function_parameters) [90534 90541])
                ("cmin" variable nil (reparse-symbol function_parameters) [90548 90552])
                ("cmax" variable nil (reparse-symbol function_parameters) [90570 90574])
                ("hold" variable nil (reparse-symbol function_parameters) [90581 90585])
                ("kwargs" variable nil (reparse-symbol function_parameters) [90592 90600]))              ) nil [90482 91017])
            ("" code nil nil [91129 91142])
            ("hlines" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [91154 91155])
                ("xmin" variable nil (reparse-symbol function_parameters) [91157 91161])
                ("xmax" variable nil (reparse-symbol function_parameters) [91163 91167])
                ("colors" variable nil (reparse-symbol function_parameters) [91169 91175])
                ("linestyles" variable nil (reparse-symbol function_parameters) [91181 91191])
                ("label" variable nil (reparse-symbol function_parameters) [91201 91206])
                ("hold" variable nil (reparse-symbol function_parameters) [91211 91215])
                ("kwargs" variable nil (reparse-symbol function_parameters) [91233 91241]))              ) nil [91143 91624])
            ("" code nil nil [91736 91749])
            ("imshow" function (:arguments 
              ( ("X" variable nil (reparse-symbol function_parameters) [91761 91762])
                ("cmap" variable nil (reparse-symbol function_parameters) [91764 91768])
                ("norm" variable nil (reparse-symbol function_parameters) [91775 91779])
                ("aspect" variable nil (reparse-symbol function_parameters) [91786 91792])
                ("interpolation" variable nil (reparse-symbol function_parameters) [91799 91812])
                ("alpha" variable nil (reparse-symbol function_parameters) [91819 91824])
                ("vmin" variable nil (reparse-symbol function_parameters) [91842 91846])
                ("vmax" variable nil (reparse-symbol function_parameters) [91853 91857])
                ("origin" variable nil (reparse-symbol function_parameters) [91864 91870])
                ("extent" variable nil (reparse-symbol function_parameters) [91877 91883])
                ("shape" variable nil (reparse-symbol function_parameters) [91890 91895])
                ("filternorm" variable nil (reparse-symbol function_parameters) [91913 91923])
                ("filterrad" variable nil (reparse-symbol function_parameters) [91927 91936])
                ("imlim" variable nil (reparse-symbol function_parameters) [91942 91947])
                ("resample" variable nil (reparse-symbol function_parameters) [91954 91962])
                ("url" variable nil (reparse-symbol function_parameters) [91969 91972])
                ("hold" variable nil (reparse-symbol function_parameters) [91990 91994])
                ("kwargs" variable nil (reparse-symbol function_parameters) [92001 92009]))              ) nil [91750 92642])
            ("" code nil nil [92754 92767])
            ("loglog" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [92779 92784])
                ("kwargs" variable nil (reparse-symbol function_parameters) [92786 92794]))              ) nil [92768 93129])
            ("" code nil nil [93241 93254])
            ("pcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [93266 93271])
                ("kwargs" variable nil (reparse-symbol function_parameters) [93273 93281]))              ) nil [93255 93628])
            ("" code nil nil [93740 93757])
            ("pcolormesh" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [93773 93778])
                ("kwargs" variable nil (reparse-symbol function_parameters) [93780 93788]))              ) nil [93758 94139])
            ("" code nil nil [94251 94261])
            ("pie" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [94270 94271])
                ("explode" variable nil (reparse-symbol function_parameters) [94273 94280])
                ("labels" variable nil (reparse-symbol function_parameters) [94287 94293])
                ("colors" variable nil (reparse-symbol function_parameters) [94300 94306])
                ("autopct" variable nil (reparse-symbol function_parameters) [94313 94320])
                ("pctdistance" variable nil (reparse-symbol function_parameters) [94335 94346])
                ("shadow" variable nil (reparse-symbol function_parameters) [94352 94358])
                ("labeldistance" variable nil (reparse-symbol function_parameters) [94366 94379])
                ("startangle" variable nil (reparse-symbol function_parameters) [94385 94395])
                ("radius" variable nil (reparse-symbol function_parameters) [94410 94416])
                ("hold" variable nil (reparse-symbol function_parameters) [94423 94427]))              ) nil [94262 94949])
            ("" code nil nil [95061 95072])
            ("plot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [95082 95087])
                ("kwargs" variable nil (reparse-symbol function_parameters) [95089 95097]))              ) nil [95073 95430])
            ("" code nil nil [95542 95558])
            ("plot_date" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [95573 95574])
                ("y" variable nil (reparse-symbol function_parameters) [95576 95577])
                ("fmt" variable nil (reparse-symbol function_parameters) [95579 95582])
                ("tz" variable nil (reparse-symbol function_parameters) [95589 95591])
                ("xdate" variable nil (reparse-symbol function_parameters) [95598 95603])
                ("ydate" variable nil (reparse-symbol function_parameters) [95610 95615])
                ("hold" variable nil (reparse-symbol function_parameters) [95623 95627])
                ("kwargs" variable nil (reparse-symbol function_parameters) [95648 95656]))              ) nil [95559 96027])
            ("" code nil nil [96139 96149])
            ("psd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [96158 96159])
                ("NFFT" variable nil (reparse-symbol function_parameters) [96161 96165])
                ("Fs" variable nil (reparse-symbol function_parameters) [96171 96173])
                ("Fc" variable nil (reparse-symbol function_parameters) [96177 96179])
                ("detrend" variable nil (reparse-symbol function_parameters) [96183 96190])
                ("window" variable nil (reparse-symbol function_parameters) [96218 96224])
                ("noverlap" variable nil (reparse-symbol function_parameters) [96246 96254])
                ("pad_to" variable nil (reparse-symbol function_parameters) [96258 96264])
                ("sides" variable nil (reparse-symbol function_parameters) [96271 96276])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [96296 96309])
                ("hold" variable nil (reparse-symbol function_parameters) [96316 96320])
                ("kwargs" variable nil (reparse-symbol function_parameters) [96327 96335]))              ) nil [96150 96803])
            ("" code nil nil [96915 96928])
            ("quiver" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [96940 96945])
                ("kw" variable nil (reparse-symbol function_parameters) [96947 96951]))              ) nil [96929 97290])
            ("" code nil nil [97402 97418])
            ("quiverkey" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [97433 97438])
                ("kw" variable nil (reparse-symbol function_parameters) [97440 97444]))              ) nil [97419 97774])
            ("" code nil nil [97886 97900])
            ("scatter" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [97913 97914])
                ("y" variable nil (reparse-symbol function_parameters) [97916 97917])
                ("s" variable nil (reparse-symbol function_parameters) [97919 97920])
                ("c" variable nil (reparse-symbol function_parameters) [97925 97926])
                ("marker" variable nil (reparse-symbol function_parameters) [97932 97938])
                ("cmap" variable nil (reparse-symbol function_parameters) [97944 97948])
                ("norm" variable nil (reparse-symbol function_parameters) [97955 97959])
                ("vmin" variable nil (reparse-symbol function_parameters) [97966 97970])
                ("vmax" variable nil (reparse-symbol function_parameters) [97989 97993])
                ("alpha" variable nil (reparse-symbol function_parameters) [98000 98005])
                ("linewidths" variable nil (reparse-symbol function_parameters) [98012 98022])
                ("verts" variable nil (reparse-symbol function_parameters) [98029 98034])
                ("hold" variable nil (reparse-symbol function_parameters) [98041 98045])
                ("kwargs" variable nil (reparse-symbol function_parameters) [98064 98072]))              ) nil [97901 98552])
            ("" code nil nil [98664 98679])
            ("semilogx" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [98693 98698])
                ("kwargs" variable nil (reparse-symbol function_parameters) [98700 98708]))              ) nil [98680 99045])
            ("" code nil nil [99157 99172])
            ("semilogy" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [99186 99191])
                ("kwargs" variable nil (reparse-symbol function_parameters) [99193 99201]))              ) nil [99173 99538])
            ("" code nil nil [99650 99665])
            ("specgram" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [99679 99680])
                ("NFFT" variable nil (reparse-symbol function_parameters) [99682 99686])
                ("Fs" variable nil (reparse-symbol function_parameters) [99692 99694])
                ("Fc" variable nil (reparse-symbol function_parameters) [99698 99700])
                ("detrend" variable nil (reparse-symbol function_parameters) [99704 99711])
                ("window" variable nil (reparse-symbol function_parameters) [99744 99750])
                ("noverlap" variable nil (reparse-symbol function_parameters) [99772 99780])
                ("cmap" variable nil (reparse-symbol function_parameters) [99786 99790])
                ("xextent" variable nil (reparse-symbol function_parameters) [99797 99804])
                ("pad_to" variable nil (reparse-symbol function_parameters) [99824 99830])
                ("sides" variable nil (reparse-symbol function_parameters) [99837 99842])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [99854 99867])
                ("hold" variable nil (reparse-symbol function_parameters) [99874 99878])
                ("kwargs" variable nil (reparse-symbol function_parameters) [99898 99906]))              ) nil [99666 100459])
            ("" code nil nil [100571 100587])
            ("stackplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [100602 100603])
                ("args" variable nil (reparse-symbol function_parameters) [100605 100610])
                ("kwargs" variable nil (reparse-symbol function_parameters) [100612 100620]))              ) nil [100588 100961])
            ("" code nil nil [101073 101084])
            ("stem" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [101094 101099])
                ("kwargs" variable nil (reparse-symbol function_parameters) [101101 101109]))              ) nil [101085 101442])
            ("" code nil nil [101554 101565])
            ("step" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [101575 101576])
                ("y" variable nil (reparse-symbol function_parameters) [101578 101579])
                ("args" variable nil (reparse-symbol function_parameters) [101581 101586])
                ("kwargs" variable nil (reparse-symbol function_parameters) [101588 101596]))              ) nil [101566 101935])
            ("" code nil nil [102047 102064])
            ("streamplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [102080 102081])
                ("y" variable nil (reparse-symbol function_parameters) [102083 102084])
                ("u" variable nil (reparse-symbol function_parameters) [102086 102087])
                ("v" variable nil (reparse-symbol function_parameters) [102089 102090])
                ("density" variable nil (reparse-symbol function_parameters) [102092 102099])
                ("linewidth" variable nil (reparse-symbol function_parameters) [102103 102112])
                ("color" variable nil (reparse-symbol function_parameters) [102119 102124])
                ("cmap" variable nil (reparse-symbol function_parameters) [102131 102135])
                ("norm" variable nil (reparse-symbol function_parameters) [102157 102161])
                ("arrowsize" variable nil (reparse-symbol function_parameters) [102168 102177])
                ("arrowstyle" variable nil (reparse-symbol function_parameters) [102181 102191])
                ("minlength" variable nil (reparse-symbol function_parameters) [102199 102208])
                ("transform" variable nil (reparse-symbol function_parameters) [102229 102238])
                ("hold" variable nil (reparse-symbol function_parameters) [102245 102249]))              ) nil [102065 102814])
            ("" code nil nil [102926 102943])
            ("tricontour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [102959 102964])
                ("kwargs" variable nil (reparse-symbol function_parameters) [102966 102974]))              ) nil [102944 103348])
            ("" code nil nil [103460 103478])
            ("tricontourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [103495 103500])
                ("kwargs" variable nil (reparse-symbol function_parameters) [103502 103510]))              ) nil [103479 103885])
            ("" code nil nil [103997 104013])
            ("tripcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [104028 104033])
                ("kwargs" variable nil (reparse-symbol function_parameters) [104035 104043]))              ) nil [104014 104393])
            ("" code nil nil [104505 104519])
            ("triplot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [104532 104537])
                ("kwargs" variable nil (reparse-symbol function_parameters) [104539 104547]))              ) nil [104520 104883])
            ("" code nil nil [104995 105008])
            ("vlines" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [105020 105021])
                ("ymin" variable nil (reparse-symbol function_parameters) [105023 105027])
                ("ymax" variable nil (reparse-symbol function_parameters) [105029 105033])
                ("colors" variable nil (reparse-symbol function_parameters) [105035 105041])
                ("linestyles" variable nil (reparse-symbol function_parameters) [105047 105057])
                ("label" variable nil (reparse-symbol function_parameters) [105067 105072])
                ("hold" variable nil (reparse-symbol function_parameters) [105077 105081])
                ("kwargs" variable nil (reparse-symbol function_parameters) [105099 105107]))              ) nil [105009 105490])
            ("" code nil nil [105602 105614])
            ("xcorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [105625 105626])
                ("y" variable nil (reparse-symbol function_parameters) [105628 105629])
                ("normed" variable nil (reparse-symbol function_parameters) [105631 105637])
                ("detrend" variable nil (reparse-symbol function_parameters) [105644 105651])
                ("usevlines" variable nil (reparse-symbol function_parameters) [105671 105680])
                ("maxlags" variable nil (reparse-symbol function_parameters) [105697 105704])
                ("hold" variable nil (reparse-symbol function_parameters) [105709 105713])
                ("kwargs" variable nil (reparse-symbol function_parameters) [105720 105728]))              ) nil [105615 106119])
            ("" code nil nil [106231 106243])
            ("barbs" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [106254 106259])
                ("kw" variable nil (reparse-symbol function_parameters) [106261 106265]))              ) nil [106244 106591])
            ("" code nil nil [106706 106716])
            ("cla" function nil nil [106717 106791])
            ("" code nil nil [106906 106917])
            ("grid" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [106927 106928])
                ("which" variable nil (reparse-symbol function_parameters) [106935 106940])
                ("axis" variable nil (reparse-symbol function_parameters) [106950 106954])
                ("kwargs" variable nil (reparse-symbol function_parameters) [106963 106971]))              ) nil [106918 107075])
            ("" code nil nil [107190 107203])
            ("legend" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [107215 107220])
                ("kwargs" variable nil (reparse-symbol function_parameters) [107222 107230]))              ) nil [107204 107314])
            ("" code nil nil [107429 107441])
            ("table" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [107452 107460]))              ) nil [107442 107536])
            ("" code nil nil [107651 107662])
            ("text" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [107672 107673])
                ("y" variable nil (reparse-symbol function_parameters) [107675 107676])
                ("s" variable nil (reparse-symbol function_parameters) [107678 107679])
                ("fontdict" variable nil (reparse-symbol function_parameters) [107681 107689])
                ("withdash" variable nil (reparse-symbol function_parameters) [107696 107704])
                ("kwargs" variable nil (reparse-symbol function_parameters) [107712 107720]))              ) nil [107663 107842])
            ("" code nil nil [107957 107972])
            ("annotate" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [107986 107991])
                ("kwargs" variable nil (reparse-symbol function_parameters) [107993 108001]))              ) nil [107973 108087])
            ("" code nil nil [108202 108225])
            ("ticklabel_format" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [108247 108255]))              ) nil [108226 108342])
            ("" code nil nil [108457 108478])
            ("locator_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [108498 108502])
                ("tight" variable nil (reparse-symbol function_parameters) [108511 108516])
                ("kwargs" variable nil (reparse-symbol function_parameters) [108523 108531]))              ) nil [108479 108640])
            ("" code nil nil [108755 108773])
            ("tick_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [108790 108794])
                ("kwargs" variable nil (reparse-symbol function_parameters) [108803 108811]))              ) nil [108774 108904])
            ("" code nil nil [109019 109033])
            ("margins" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [109046 109051])
                ("kw" variable nil (reparse-symbol function_parameters) [109053 109057]))              ) nil [109034 109138])
            ("" code nil nil [109253 109269])
            ("autoscale" function (:arguments 
              ( ("enable" variable nil (reparse-symbol function_parameters) [109284 109290])
                ("axis" variable nil (reparse-symbol function_parameters) [109297 109301])
                ("tight" variable nil (reparse-symbol function_parameters) [109310 109315]))              ) nil [109270 109429])
            ("autumn" function nil nil [109522 109798])
            ("bone" function nil nil [109892 110160])
            ("cool" function nil nil [110254 110522])
            ("copper" function nil nil [110616 110892])
            ("flag" function nil nil [110986 111254])
            ("gray" function nil nil [111348 111616])
            ("hot" function nil nil [111710 111974])
            ("hsv" function nil nil [112068 112332])
            ("jet" function nil nil [112426 112690])
            ("pink" function nil nil [112784 113052])
            ("prism" function nil nil [113146 113418])
            ("spring" function nil nil [113512 113788])
            ("summer" function nil nil [113882 114158])
            ("winter" function nil nil [114252 114528])
            ("spectral" function nil nil [114622 114906])
            ("_setup_pyplot_info_docstrings" code nil nil [114907 114938]))          
      :file "pyplot.py"
      :pointmax 114939
      :fsize 114938
      :lastmodtime '(21489 45976 0 0)
      :unmatched-syntax '((NAME 12785 . 12793) (IF 12813 . 12815) (ELSE 12824 . 12828)))
    (semanticdb-table "colorbar.py"
      :file "colorbar.py"
      :fsize 47866
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "cbook.py"
      :file "cbook.py"
      :fsize 59596
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "backend_bases.py"
      :file "backend_bases.py"
      :fsize 106958
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "figure.py"
      :file "figure.py"
      :fsize 56634
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "gridspec.py"
      :file "gridspec.py"
      :fsize 14985
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "image.py"
      :file "image.py"
      :fsize 49269
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "rcsetup.py"
      :file "rcsetup.py"
      :fsize 31862
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "artist.py"
      :file "artist.py"
      :fsize 40700
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "axes.py"
      :file "axes.py"
      :fsize 334534
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "scale.py"
      :file "scale.py"
      :fsize 15951
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "cm.py"
      :file "cm.py"
      :fsize 11559
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "colors.py"
      :file "colors.py"
      :fsize 53183
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "lines.py"
      :file "lines.py"
      :fsize 41958
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "text.py"
      :file "text.py"
      :fsize 70519
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "patches.py"
      :file "patches.py"
      :fsize 139614
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "widgets.py"
      :file "widgets.py"
      :fsize 52893
      :lastmodtime '(21078 41160 0 0))
    (semanticdb-table "ticker.py"
      :file "ticker.py"
      :fsize 55538
      :lastmodtime '(21078 41160 0 0)))
  :file "!usr!lib64!python2.7!site-packages!matplotlib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
